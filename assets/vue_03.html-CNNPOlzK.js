import{_ as p,r as o,o as c,c as l,b as n,d as s,a as t,f as e}from"./app-pp3-cujv.js";const i="/blog/assets/img-2-BFN5w0w9.png",u="/blog/assets/img-3-BYuMJ7iG.png",d="/blog/assets/img-4-CacvQMHQ.png",r="/blog/assets/img-5-Crc_NkKb.png",k="/blog/assets/img-7-B9l_3KUA.jpg",m="/blog/assets/img-8-BczSlTyo.png",v="/blog/assets/img-9-ZUE3NKHZ.png",g="/blog/assets/img-10-B6JmqRFb.png",h="/blog/assets/img-11-C-1OKkiU.png",b="/blog/assets/img-12-5ol8O4Z-.png",f="/blog/assets/img-13-BFra12Ru.png",V="/blog/assets/img-14-DWRTbvPn.png",_={},N=n("h1",{id:"目标",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#目标","aria-hidden":"true"},"#"),s(" 目标")],-1),w=n("ul",null,[n("li",null,"理解Vue批量异步更新策略"),n("li",null,"掌握虚拟DOM和Diff算法")],-1),x={href:"https://www.processon.com/mindmap/64d391ece55181435686cc5f",target:"_blank",rel:"noopener noreferrer"},j=e('<h2 id="异步更新队列" tabindex="-1"><a class="header-anchor" href="#异步更新队列" aria-hidden="true">#</a> 异步更新队列</h2><p>Vue高效的秘诀是一套批量、异步的更新策略。</p><h3 id="概念解释" tabindex="-1"><a class="header-anchor" href="#概念解释" aria-hidden="true">#</a> 概念解释</h3><p><img src="'+i+'" alt=""></p><ul><li>事件循环Event Loop: 浏览器为了协调时间处理、脚本执行、网络请求和渲染等任务而制定的工作机制。</li><li>宏任务Task: 代表一个个离散的、独立的工作单元。浏览器完成一个宏任务，在下一个宏任务执行开始前，会对页面进行重新渲染，主要包括创建文档对象、解析HTML、执行主线js代码以及各种事件如页面加载、输入、网络事件和定时器等。</li><li>微任务microtasks: 微任务是更小的任务，是在当前宏任务执行结束后立即执行的任务。如果存在微任务，浏览器会清空微任务之后再重新渲染。微任务的例子有Promise回调函数、DOM变化等。</li></ul>',5),y={href:"https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/?utm_source=html5weekly",target:"_blank",rel:"noopener noreferrer"},M=e('<h3 id="vue中的具体实现" tabindex="-1"><a class="header-anchor" href="#vue中的具体实现" aria-hidden="true">#</a> vue中的具体实现</h3><p><img src="'+u+'" alt=""></p><ul><li>异步：只有监听到数据变化，Vue将开启一个队列，并缓冲在同一时间循环中发生的所有数据变更。</li><li>批量：如果同一个watcher被多次触发，只会被推入到队列中一次。去重对于避免不必要的计算和DOM操作是非常重要的。然后，在下一个的事件循环&#39;tick&#39;中，Vue刷新队列执行实际工作。</li><li>异步策略：Vue在内部对异步队列尝试使用原生的Promise.then,MutationObserver或setImmediate，如果执行环境都不支持，则采用setTimeout代替。</li></ul><p><strong>update() core\\observer\\watcher.js</strong></p><p>dep.notify()之后watcher执行更新，执行入队操作</p><p><strong>queueWatcher(watcher) core\\observer\\scheduler.js</strong></p><p>执行watcher入队操作</p><p><strong>nextTick(flushSchedulerQueue) core\\util\\next-tick.js</strong></p><p>nextTick按照特定异步策略执行队列操作</p><h2 id="虚拟dom" tabindex="-1"><a class="header-anchor" href="#虚拟dom" aria-hidden="true">#</a> 虚拟DOM</h2><h3 id="概念" tabindex="-1"><a class="header-anchor" href="#概念" aria-hidden="true">#</a> 概念</h3><p>虚拟DOM(Virtual DOM)是对DOM的js抽象表示，它们是JS对象，能描述DOM结构和关系。应用的各种状态变化会作用于虚拟DOM，最终映射到DOM上。</p><p><img src="'+d+`" alt=""></p><h3 id="体验虚拟dom" tabindex="-1"><a class="header-anchor" href="#体验虚拟dom" aria-hidden="true">#</a> 体验虚拟DOM</h3><p>Vue中虚拟dom基于snabbdom实现。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!--安装并引入snabbdom--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://cdn.bootcdn.net/ajax/libs/snabbdom/0.7.4/snabbdom.min.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token comment">// 之前编写的响应式函数</span>
  <span class="token keyword">function</span> <span class="token function">defineReactive</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> key<span class="token punctuation">,</span> val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">{</span>
      <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> val
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token function">set</span><span class="token punctuation">(</span>newVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        val <span class="token operator">=</span> newVal
        <span class="token comment">// 通知更新</span>
        <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 导入patch的工厂init，h是产生VNode的工厂</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span>init<span class="token punctuation">,</span> h<span class="token punctuation">}</span> <span class="token operator">=</span> snabbdom
  <span class="token comment">// 获取patch函数</span>
  <span class="token keyword">const</span> patch <span class="token operator">=</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token comment">// 上次VNode，由patch()返回</span>
  <span class="token keyword">let</span> VNode<span class="token punctuation">;</span>

  <span class="token comment">// 更新函数，将数据操作转换为dom操作，返回新VNode</span>
  <span class="token keyword">function</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>VNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 初始化，没有上次VNode，传入宿主元素和VNode</span>
      VNode <span class="token operator">=</span> <span class="token function">patch</span><span class="token punctuation">(</span>app<span class="token punctuation">,</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token comment">// 更新，传入新旧VNode对比并做更新</span>
      VNode <span class="token operator">=</span> <span class="token function">patch</span><span class="token punctuation">(</span>VNode<span class="token punctuation">,</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 渲染函数，返回VNode描述dom结构</span>
  <span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span> obj<span class="token punctuation">.</span>foo<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 数据 </span>
  <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token comment">// 定义响应式 </span>
  <span class="token function">defineReactive</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
  <span class="token comment">// 赋一个日期作为初始值 </span>
  obj<span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLocaleTimeString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token comment">// 定时改变数据，更新函数会重新执行</span>
  <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    obj<span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLocaleTimeString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>   
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="优点" tabindex="-1"><a class="header-anchor" href="#优点" aria-hidden="true">#</a> 优点</h4><ul><li>虚拟DOM轻量、快速：当它们发生变化时通过新旧虚拟DOM比对可以得到最小DOM操作量，配合异步更新策略减少刷新频率，从而提升性能</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">patch</span><span class="token punctuation">(</span>VNode<span class="token punctuation">,</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span> obj<span class="token punctuation">.</span>foo<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>跨平台：将虚拟dom更新转换为不同运行时特殊操作实现跨平台</li><li>兼容性：还可以加入兼容性代码增强操作的兼容性</li></ul><h4 id="必要性" tabindex="-1"><a class="header-anchor" href="#必要性" aria-hidden="true">#</a> 必要性</h4><p>vue1.0有细粒度的数据变化侦测，它所不需要虚拟DOM的，但是细粒度造成大量开销，这对于大型项目来说所不可接受。因此，vue2.0选择了中等粒度的解决方案，每一个组件一个watch实例，这样状态变化时只能通知组件，再通过引入虚拟DOM去进行比对和渲染。</p><h4 id="整体流程" tabindex="-1"><a class="header-anchor" href="#整体流程" aria-hidden="true">#</a> 整体流程</h4><p><strong>mountComponent() core/instance/lifecycle.js</strong></p><p>渲染、更新组件</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 定义更新函数 const</span>
<span class="token function-variable function">updateComponent</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 实际调用是在lifeCycleMixin中定义的_update和renderMixin中定义的_render</span>
  vm<span class="token punctuation">.</span><span class="token function">_update</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span><span class="token function">_render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> hydrating<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>_render core/instance/render.js</strong></p><p>生成虚拟dom</p><p><strong>_update core\\instance\\lifecycle.js</strong></p><p>update负责更新dom，转换VNode为dom</p><p><strong><strong>patch</strong>() platforms/web/runtime/index.js</strong></p><p>__patch__是在平台特有代码中指定的</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__patch__ <span class="token operator">=</span> inBrowser <span class="token operator">?</span> patch <span class="token operator">:</span> noop
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="patch获取" tabindex="-1"><a class="header-anchor" href="#patch获取" aria-hidden="true">#</a> patch获取</h4><p>patch是createPatchFunction的返回值，传递nodeOps和modules所web平台特别实现</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token literal-property property">patch</span><span class="token operator">:</span> Function <span class="token operator">=</span> <span class="token function">createPatchFunction</span><span class="token punctuation">(</span><span class="token punctuation">{</span> nodeOps<span class="token punctuation">,</span> modules <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>platforms\\web\\runtime\\node-ops.js</strong></p><p>定义各种原生dom基础操作方法</p><p><strong>platforms\\web\\runtime\\modules\\index.js</strong></p><p>modules 定义了属性更新实现</p><p>watcher.run() =&gt; componentUpdate() =&gt; render() =&gt; update() =&gt; patch()</p><h4 id="patch实现" tabindex="-1"><a class="header-anchor" href="#patch实现" aria-hidden="true">#</a> patch实现</h4><p><strong>patch core\\vdom\\patch.js</strong></p><p>首先进行树级别比较，可能有三种情况：增删改。</p><ul><li>new VNode不存在就删除；</li><li>old VNode不存在就新增；</li><li>都存在就执行diff 执行更新</li></ul><p><img src="`+r+'" alt=""></p><p><strong>patchVNode</strong></p><p>比较两个VNode，包括三种类型操作：属性更新，文本更新，子节点更新。 具体规则如下：</p><ol><li>新老节点均有children子节点，则对子节点进行diff操作，调用updateChildren</li><li>如果新节点有子节点，而老节点没有子节点，先清空老节点的文本内容，然后为其新增子节点</li><li>当新节点没有子节点，而老节点有子节点的时候，则移除该节点的所有子节点</li><li>当新老节点都无子节点的时候，只是文本的替换</li></ol><p><strong>updateChildren</strong></p><p>updateChildren主要作用是用一种较高效的方式比对新旧两个VNode的children得出最小操作补丁。 执行一个双循环所传统方式，vue针对web场景特点做了特别的算法优化。</p><p><img src="'+k+'" alt=""></p><p>在新老两组VNode节点的左右头尾两侧都有一个变量标记，在遍历过程中这几个变量都会向中间靠拢，当<code>oldStartIdx&gt;oldEndIdx</code>或者<code>newStartIdx&gt;newEndIdx</code>时结束循环。</p><p>下面时遍历规则： 首先，oldStartVNode、oldEmdVmode 与 newStartVNode、newEndVNode两两交叉比较，共有四种比较方法。</p><p>当oldStartVNode和newStartVNode 或者 oldEndVNode和newEndVNode满足sameVNode，直接将该VNode节点进行patchVNode即可，不需再遍历就完成一次循环。</p><p><img src="'+m+'" alt=""></p><p>如果oldStartVNode和newEndVNode满足sameVNode。说明oldStartVNode已经跑到oldEndVNode后面去了，进行patchVNode的同时还需要将正式DOM节点移动到oldEndVNode的后面。</p><p><img src="'+v+'" alt=""></p><p>如果oldEndVNode与newStartVNode满足sameVNode，说明oldEenVNode跑到了oldStartVNode的前面，进行patchVNode的同时要将oldEndVNode对应DOM移动到oldStartVNode对应DOM的前面。</p><p><img src="'+g+'" alt=""></p><p>如果以上情况均不符合，则在oldVNode中找与newStartVNode相同的节点，若存在执行patchVNode，同时将elmToMove移动到oldStartIdx对应的DOM的前面。</p><p><img src="'+h+'" alt=""></p><p>当然也有可能newStartVNode在oldVNode中找不到一致的sameVNode，这个时候会调用createEle创建一个新的DOM节点。</p><p><img src="'+b+'" alt=""></p><p>至此循环结束，但是我没还需要处理剩下的节点。</p><p>当结束时oldStartIdx&gt;oldEndIdx，这个时候旧的VNode节点已经遍历完了，但是新的节点还没有，说明了新的VNode节点事件上比老的VNode多，需要将剩下的VNode对应的DOM插入到真实DOM中，此时调用addVNodes(批量调用createElm接口)。</p><p><img src="'+f+'" alt=""></p><p>但是，当结束时newStartIdx&gt;newEndIdx时，说明新的VNode节点已经遍历完了，但是老的节点还有剩余，需要从文档中删除。</p><p><img src="'+V+'" alt=""></p><blockquote><p>key的作用 判断两个VNode是否相同节点</p></blockquote>',70);function O(D,E){const a=o("ExternalLinkIcon");return c(),l("div",null,[N,w,n("p",null,[n("a",x,[s("总结的思维导图"),t(a)])]),j,n("p",null,[n("a",y,[s("task体验-歪果仁"),t(a)])]),M])}const q=p(_,[["render",O],["__file","vue_03.html.vue"]]);export{q as default};
