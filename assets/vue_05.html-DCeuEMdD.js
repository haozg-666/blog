import{_ as p,r as o,o as l,c as i,b as n,d as a,a as e,f as t}from"./app-pp3-cujv.js";const c="/blog/assets/vnode-B_1vTg7n.png",r="/blog/assets/diff-03vloevc.png",u="/blog/assets/key1-BvGGjIef.jpg",d="/blog/assets/key2-DIcdar0q.jpg",k="/blog/assets/bestPractice-D3v6qLrc.jpg",v="/blog/assets/SSR-CjyTOl2m.jpeg",h="/blog/assets/SPA-P5IRveOi.jpeg",m="/blog/assets/deploy-B5g6bNEw.jpeg",b={},g={href:"https://github.com/57code/vue-interview",target:"_blank",rel:"noopener noreferrer"},f={href:"https://www.bilibili.com/video/BV11i4y1Q7H2/?vd_source=3cf5150c83707fd658ae9eb368adbc01",target:"_blank",rel:"noopener noreferrer"},y=t(`<blockquote><p>以下内容仅用来自己学习复习用。 原文链接与视频链接请看上面。</p></blockquote><h2 id="_1-vue组件之间通信方式有哪些" tabindex="-1"><a class="header-anchor" href="#_1-vue组件之间通信方式有哪些" aria-hidden="true">#</a> 1. Vue组件之间通信方式有哪些</h2><p>vue是组件化开发框架，所以对于vue应用来说组件间的数据通信非常重要。此题主要考察vue基本功，对于vue基础api运用熟练度。另外一些边界知识，如provide/inject/$attrs则体现了面试者的知识广度。</p><h3 id="思路分析-总分" tabindex="-1"><a class="header-anchor" href="#思路分析-总分" aria-hidden="true">#</a> 思路分析: 总分</h3><ol><li>总述知道的所有方式</li><li>按组件关系阐述使用场景</li></ol><h3 id="回答" tabindex="-1"><a class="header-anchor" href="#回答" aria-hidden="true">#</a> 回答</h3><ol><li>组件通信方式大体有以下8种： <ul><li>props</li><li>$emit/<s>$on</s></li><li><s>$children</s>/$parent</li><li>$attrs/<s>$listeners</s></li><li>ref</li><li>$root</li><li>eventbus</li><li>vuex</li></ul></li><li>根据组件之间关系讨论组件通信 <ul><li>父子组件 <ul><li>props</li><li>$emit/$on</li><li>$parent/$children</li><li>ref</li><li>$attrs/$listeners</li></ul></li><li>兄弟组件 <ul><li>$parent</li><li>$eventbus</li><li>vuex</li></ul></li><li>跨层级组件 <ul><li>provide/inject</li><li>$root</li><li>eventbus</li><li>vuex</li></ul></li></ul></li></ol><h2 id="_2-v-if和v-for哪个优先级更高" tabindex="-1"><a class="header-anchor" href="#_2-v-if和v-for哪个优先级更高" aria-hidden="true">#</a> 2. v-if和v-for哪个优先级更高？</h2><h3 id="思路分析-总分总模式" tabindex="-1"><a class="header-anchor" href="#思路分析-总分总模式" aria-hidden="true">#</a> 思路分析：总分总模式</h3><ol><li>先说结论</li><li>为什么是这样的</li><li>它们能放在一起吗</li><li>如果不能，那应该怎样</li><li>总结</li></ol><h3 id="回答-1" tabindex="-1"><a class="header-anchor" href="#回答-1" aria-hidden="true">#</a> 回答</h3><ol><li>在<code>Vue2</code>中，<code>v-for</code>优先于<code>v-if</code>被解析；但是在<code>vue3</code>中完全相反，<code>v-if</code>的优先级高于<code>v-for</code></li><li>我曾经做过实验，把<code>Vue2</code>输出的渲染函数<code>app.$options.render</code>打印出来，可以看出所先执行循环在判断条件</li><li>不应该放在一起，因为就是我们只渲染列表中的一部分元素，也得在每次组件重新渲染的时候会遍历整个列表</li><li>通常有两种场景会导致我们这样做： <ul><li>为了过滤列表中的项目 (比如<code>v-for=&quot;user in users&quot; v-if=&quot;user.isActive&quot;</code>)。此时定义一个计算属性 (比如<code>activeUsers</code>)，让其返回过滤后的列表即可。</li><li>为了避免渲染本应该被隐藏的列表 (比如<code>v-for=&quot;user in users&quot; v-if=&quot;shouldShowUsers&quot;</code>)。此时把<code>v-if</code>移动至容器元素上 (比如 ul、ol)即可。</li></ul></li><li>官方文档明确指出永远不要把<code>v-if</code>和<code>v-for</code>同时用在同一元素上，显然是一个重要的注意事项</li><li>看过源码里关于代码生成的部分，能够看到是先处理<code>v-if</code>还是<code>v-for</code></li></ol><h3 id="知其所以然" tabindex="-1"><a class="header-anchor" href="#知其所以然" aria-hidden="true">#</a> 知其所以然</h3><p>在Vue2中的测试显示的渲染函数：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>ƒ <span class="token function">anonymous</span><span class="token punctuation">(</span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token keyword">with</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token function">_c</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token literal-property property">attrs</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token string-property property">&quot;id&quot;</span><span class="token operator">:</span><span class="token string">&quot;app&quot;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function">_l</span><span class="token punctuation">(</span><span class="token punctuation">(</span>items<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>isActive<span class="token punctuation">)</span><span class="token operator">?</span><span class="token function">_c</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token literal-property property">key</span><span class="token operator">:</span>item<span class="token punctuation">.</span>id<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token function">_v</span><span class="token punctuation">(</span><span class="token string">&quot;\\n      &quot;</span><span class="token operator">+</span><span class="token function">_s</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot;\\n    &quot;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">_e</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在vue3中的测试显示的渲染函数：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">anonymous</span><span class="token punctuation">(</span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token keyword">const</span> _Vue <span class="token operator">=</span> Vue

<span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">_ctx<span class="token punctuation">,</span> _cache</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">with</span> <span class="token punctuation">(</span>_ctx<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token literal-property property">renderList</span><span class="token operator">:</span> _renderList<span class="token punctuation">,</span> <span class="token literal-property property">Fragment</span><span class="token operator">:</span> _Fragment<span class="token punctuation">,</span> <span class="token literal-property property">openBlock</span><span class="token operator">:</span> _openBlock<span class="token punctuation">,</span> <span class="token literal-property property">createElementBlock</span><span class="token operator">:</span> _createElementBlock<span class="token punctuation">,</span> <span class="token literal-property property">toDisplayString</span><span class="token operator">:</span> _toDisplayString<span class="token punctuation">,</span> <span class="token literal-property property">createCommentVNode</span><span class="token operator">:</span> _createCommentVNode <span class="token punctuation">}</span> <span class="token operator">=</span> _Vue

    <span class="token keyword">return</span> shouldShowUsers
      <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token function">_openBlock</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_createElementBlock</span><span class="token punctuation">(</span>_Fragment<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token function">_renderList</span><span class="token punctuation">(</span>items<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">_openBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_createElementBlock</span><span class="token punctuation">(</span><span class="token string">&quot;div&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> item<span class="token punctuation">.</span>id <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token function">_toDisplayString</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token comment">/* TEXT */</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">128</span> <span class="token comment">/* KEYED_FRAGMENT */</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token operator">:</span> <span class="token function">_createCommentVNode</span><span class="token punctuation">(</span><span class="token string">&quot;v-if&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>源码中找答案：</p>`,18),_={href:"https://github1s.com/vuejs/vue/blob/dev/src/compiler/codegen/index.js#L65-L69",target:"_blank",rel:"noopener noreferrer"},x={href:"https://github1s.com/vuejs/core/blob/main/packages/compiler-core/src/codegen.ts#L586-L587",target:"_blank",rel:"noopener noreferrer"},w=t('<h2 id="_3-简述vue生命周期" tabindex="-1"><a class="header-anchor" href="#_3-简述vue生命周期" aria-hidden="true">#</a> 3. 简述vue生命周期</h2><h3 id="思路" tabindex="-1"><a class="header-anchor" href="#思路" aria-hidden="true">#</a> 思路</h3><ol><li>给出概念</li><li>列举生命周期各阶段</li><li>阐述整体流程</li><li>结合实践</li><li>扩展：vue3变化</li></ol><h3 id="回答范例" tabindex="-1"><a class="header-anchor" href="#回答范例" aria-hidden="true">#</a> 回答范例</h3><ol><li>每个Vue组件实例被创建后都会经过一系列初始化步骤，比如，数据观测，模板编译，挂载实例到dom上，以及数据变化时更新dom。这个过程中会运行叫做生命周期的函数，以便用户在特定阶段有机会添加它们自己的代码。</li><li>Vue生命周期总共可以分为8个函数，创建前后，载入前后，更新前后，销毁前后，以及一些特殊场景的生命周期。vue3新增了三个用于调试和服务端渲染场景。</li></ol><table><thead><tr><th>生命周期v2</th><th>生命周期v3</th><th>描述</th></tr></thead><tbody><tr><td>beforeCreate</td><td>beforeCreate</td><td>组件实例被创建之初</td></tr><tr><td>created</td><td>created</td><td>组件实例已经完全创建</td></tr><tr><td>beforeMount</td><td>beforeMount</td><td>组件挂载之前</td></tr><tr><td>mounted</td><td>mounted</td><td>组件挂载到实例上去之后</td></tr><tr><td>beforeUpdate</td><td>beforeUpdate</td><td>组件数据发生变化，更新之前</td></tr><tr><td>updated</td><td>updated</td><td>数据数据更新之后</td></tr><tr><td>beforeDestroy</td><td><strong>beforeUnmount</strong></td><td>组件实例销毁之前</td></tr><tr><td>destroyed</td><td><strong>unmounted</strong></td><td>组件实例销毁之后</td></tr><tr><td>activated</td><td>activated</td><td>keep-alive 缓存的组件激活时</td></tr><tr><td>deactivated</td><td>deactivated</td><td>keep-alive 缓存的组件停用时调用</td></tr><tr><td>errorCaptured</td><td>errorCaptured</td><td>捕获一个来自子孙组件的错误时被调用</td></tr><tr><td>-</td><td><strong>renderTracked</strong></td><td>调试钩子，响应式依赖被收集时调用</td></tr><tr><td>-</td><td><strong>renderTriggered</strong></td><td>调试钩子，响应式依赖被触发时调用</td></tr><tr><td>-</td><td><strong>serverPrefetch</strong></td><td>ssr only，组件实例在服务器上被渲染前调用</td></tr></tbody></table><ol start="3"><li>Vue生命周期流程图 <ol><li><img src="https://v2.cn.vuejs.org/images/lifecycle.png" alt="Vue2"></li><li><img src="https://cn.vuejs.org/assets/lifecycle.16e4c08e.png" alt="Vue3"></li></ol></li><li>结合实践 <ul><li><strong>beforeCreate</strong>: 通常用于插件开发中执行一些初始化任务</li><li><strong>created</strong>: 组件初始化完毕，可以访问各种数据，获取接口数据等</li><li><strong>mounted</strong>：dom已创建，可用于获取访问数据和dom元素；访问子组件等</li><li><strong>beforeUpdate</strong>: 此时<code>view</code>层还未更新，可用于获取更新前各种状态</li><li><strong>update</strong>: 完成<code>view</code>层的更新，更新后，所有状态已经所最新</li><li><strong>beforeUnmount</strong>:实例被销毁前调用，可用于一些定时器或订阅的取消</li><li><strong>unmounted</strong>: 销毁一个实例。可清理它与其他实例的连接，解绑它的全部指令及事件监听器</li></ul></li></ol><h3 id="可能的追问" tabindex="-1"><a class="header-anchor" href="#可能的追问" aria-hidden="true">#</a> 可能的追问</h3><ol><li>setup和created谁先执行？</li><li>setup中为什么没有beforeCreated和created?</li></ol><h3 id="知其所以然-1" tabindex="-1"><a class="header-anchor" href="#知其所以然-1" aria-hidden="true">#</a> 知其所以然</h3>',10),j={href:"https://github1s.com/vuejs/core/blob/HEAD/packages/runtime-core/src/componentOptions.ts#L554-L555",target:"_blank",rel:"noopener noreferrer"},q={href:"https://github1s.com/vuejs/vue/blob/HEAD/src/core/instance/init.js#L55-L56",target:"_blank",rel:"noopener noreferrer"},A=t(`<h2 id="_4-v-model使用和原理" tabindex="-1"><a class="header-anchor" href="#_4-v-model使用和原理" aria-hidden="true">#</a> 4.v-model使用和原理</h2><h3 id="思路分析-3w1h" tabindex="-1"><a class="header-anchor" href="#思路分析-3w1h" aria-hidden="true">#</a> 思路分析 3w1h</h3><ol><li>给出双绑订阅</li><li>双绑带来的好处</li><li>在哪里使用双绑</li><li>使用方式</li><li>扩展：使用细节、原理实现描述</li></ol><h3 id="回答范例-1" tabindex="-1"><a class="header-anchor" href="#回答范例-1" aria-hidden="true">#</a> 回答范例</h3><ol><li>Vue中双向绑定是一个指令v-model，可以绑定一个动态值到视图，同时视图中变化能改变该值。v-model是语法糖，默认情况下相当于.value和@input</li><li>使用v-model可以减少大量繁琐的事件处理代码，提高开发效率，代码可读性也更好</li><li>通常在表单项上使用v-model</li><li>原生的表单项可以直接使用v-model，自定义组件上如果使用它需要再组件内绑定value并处理输入事件</li><li>我打印过包含v-model模板的组件渲染函数，发现它会被转换为value属性的绑定和一个事件监听，事件回调函数中会做想要变量更新操作，说明实际上是vue的编译器完成的</li></ol><h3 id="可能的追问-1" tabindex="-1"><a class="header-anchor" href="#可能的追问-1" aria-hidden="true">#</a> 可能的追问</h3><ol><li>v-model和sync修饰符有什么区别？ <ul><li>相同点： <ul><li>都是语法糖，都可以实现父子组件中的数据的双向通信</li></ul></li><li>不同点： <ul><li>格式不同：v-model=&quot;num&quot; :num.sync=&quot;num&quot;</li><li>v-model @input + :value = &quot;num&quot;</li><li>:num.sync @update:a + :a = &quot;num&quot;</li><li>v-model只能使用一次，.sync可以有多个</li></ul></li></ul></li><li>自定义组件使用v-model如果想改变事件名和属性名应该怎么做？ <ul><li>vue3和vue2不同，当使用v-model时，不论是绑定多个值还是单个值，vue3都不必要写model:{prop:&#39;xxx&#39;, event: &#39;xxx&#39;}，vue2则必须要写</li><li>vue3和vue2都必须要定义props:{xxx: [String, Number]}</li><li>vue3默认值 modelValue vue2默认值 model{prop:value, event: input}</li></ul></li></ol><h3 id="知其所以然-2" tabindex="-1"><a class="header-anchor" href="#知其所以然-2" aria-hidden="true">#</a> 知其所以然</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// &lt;input type=&quot;text&quot; v-model=&quot;foo&quot;&gt;</span>
<span class="token function">_c</span><span class="token punctuation">(</span><span class="token string">&#39;input&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> 
  <span class="token literal-property property">directives</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;model&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">rawName</span><span class="token operator">:</span> <span class="token string">&quot;v-model&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token literal-property property">expression</span><span class="token operator">:</span> <span class="token string">&quot;foo&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span> 
  <span class="token literal-property property">attrs</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token string-property property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;text&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> 
  <span class="token literal-property property">domProps</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token string-property property">&quot;value&quot;</span><span class="token operator">:</span> <span class="token punctuation">(</span>foo<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> 
  <span class="token literal-property property">on</span><span class="token operator">:</span> <span class="token punctuation">{</span> 
    <span class="token string-property property">&quot;input&quot;</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">$event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
      <span class="token keyword">if</span> <span class="token punctuation">(</span>$event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>composing<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span> 
      foo <span class="token operator">=</span> $event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value 
    <span class="token punctuation">}</span> 
  <span class="token punctuation">}</span> 
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// &lt;input type=&quot;checkbox&quot; v-model=&quot;bar&quot;&gt;</span>
<span class="token function">_c</span><span class="token punctuation">(</span><span class="token string">&#39;input&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> 
  <span class="token literal-property property">directives</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;model&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">rawName</span><span class="token operator">:</span> <span class="token string">&quot;v-model&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token punctuation">(</span>bar<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token literal-property property">expression</span><span class="token operator">:</span> <span class="token string">&quot;bar&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span> 
  <span class="token literal-property property">attrs</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token string-property property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;checkbox&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> 
  <span class="token literal-property property">domProps</span><span class="token operator">:</span> <span class="token punctuation">{</span> 
    <span class="token string-property property">&quot;checked&quot;</span><span class="token operator">:</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">_i</span><span class="token punctuation">(</span>bar<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> <span class="token punctuation">(</span>bar<span class="token punctuation">)</span> 
  <span class="token punctuation">}</span><span class="token punctuation">,</span> 
  <span class="token literal-property property">on</span><span class="token operator">:</span> <span class="token punctuation">{</span> 
    <span class="token string-property property">&quot;change&quot;</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">$event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
      <span class="token keyword">var</span> $$a <span class="token operator">=</span> bar<span class="token punctuation">,</span> $$el <span class="token operator">=</span> $event<span class="token punctuation">.</span>target<span class="token punctuation">,</span> $$c <span class="token operator">=</span> $$el<span class="token punctuation">.</span>checked <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
      <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>$$a<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
        <span class="token keyword">var</span> $$v <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> $$i <span class="token operator">=</span> <span class="token function">_i</span><span class="token punctuation">(</span>$$a<span class="token punctuation">,</span> $$v<span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token keyword">if</span> <span class="token punctuation">(</span>$$el<span class="token punctuation">.</span>checked<span class="token punctuation">)</span> <span class="token punctuation">{</span> $$i <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>bar <span class="token operator">=</span> $$a<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span>$$v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">}</span> 
        <span class="token keyword">else</span> <span class="token punctuation">{</span> 
          $$i <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>bar <span class="token operator">=</span> $$a<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> $$i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>$$a<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>$$i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">}</span> 
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> 
        bar <span class="token operator">=</span> $$c 
      <span class="token punctuation">}</span> 
    <span class="token punctuation">}</span> 
  <span class="token punctuation">}</span> 
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// &lt;select v-model=&quot;baz&quot;&gt;</span>
<span class="token comment">//     &lt;option value=&quot;vue&quot;&gt;vue&lt;/option&gt;</span>
<span class="token comment">//     &lt;option value=&quot;react&quot;&gt;react&lt;/option&gt;</span>
<span class="token comment">// &lt;/select&gt;</span>
<span class="token function">_c</span><span class="token punctuation">(</span><span class="token string">&#39;select&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> 
  <span class="token literal-property property">directives</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;model&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">rawName</span><span class="token operator">:</span> <span class="token string">&quot;v-model&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token punctuation">(</span>baz<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token literal-property property">expression</span><span class="token operator">:</span> <span class="token string">&quot;baz&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span> 
  <span class="token literal-property property">on</span><span class="token operator">:</span> <span class="token punctuation">{</span> 
    <span class="token string-property property">&quot;change&quot;</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">$event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
      <span class="token keyword">var</span> $$selectedVal <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>
        $event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>options<span class="token punctuation">,</span> 
        <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> o<span class="token punctuation">.</span>selected <span class="token punctuation">}</span>
      <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>
        <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
          <span class="token keyword">var</span> val <span class="token operator">=</span> <span class="token string">&quot;_value&quot;</span> <span class="token keyword">in</span> o <span class="token operator">?</span> o<span class="token punctuation">.</span>_value <span class="token operator">:</span> o<span class="token punctuation">.</span>value<span class="token punctuation">;</span> 
          <span class="token keyword">return</span> val 
        <span class="token punctuation">}</span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span> 
      baz <span class="token operator">=</span> $event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>multiple <span class="token operator">?</span> $$selectedVal <span class="token operator">:</span> $$selectedVal<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> 
    <span class="token punctuation">}</span> 
  <span class="token punctuation">}</span> 
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
  <span class="token function">_c</span><span class="token punctuation">(</span><span class="token string">&#39;option&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">attrs</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token string-property property">&quot;value&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vue&quot;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token function">_v</span><span class="token punctuation">(</span><span class="token string">&quot;vue&quot;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_v</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
  <span class="token function">_c</span><span class="token punctuation">(</span><span class="token string">&#39;option&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">attrs</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token string-property property">&quot;value&quot;</span><span class="token operator">:</span> <span class="token string">&quot;react&quot;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token function">_v</span><span class="token punctuation">(</span><span class="token string">&quot;react&quot;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-vue中如何扩展一个组件" tabindex="-1"><a class="header-anchor" href="#_5-vue中如何扩展一个组件" aria-hidden="true">#</a> 5.Vue中如何扩展一个组件</h2><h3 id="思路分析" tabindex="-1"><a class="header-anchor" href="#思路分析" aria-hidden="true">#</a> 思路分析</h3><ol><li>按照逻辑扩展和内容扩展来列举 <ul><li>逻辑扩展：mixins、extends、composition api;</li><li>内容扩展：slots;</li></ul></li><li>分别说出它们的使用方法、场景差异、和问题</li><li>作为扩展，还可以说说vue3中新引入的composition api带来的变化</li></ol><h3 id="回答范例-2" tabindex="-1"><a class="header-anchor" href="#回答范例-2" aria-hidden="true">#</a> 回答范例</h3><ol><li>常见的组件扩展方法有：mixins，slots，extends等</li><li>混入mixins是分发 Vue 组件中可复用功能的非常灵活的方式。混入对象可以包含任意组件选项。当组件使用混入对象时，所有混入对象的选项将被混入该组件本身的选项。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 复用代码：它是一个配置对象，选项和组件里面一样</span>
<span class="token keyword">const</span> mymixin <span class="token operator">=</span> <span class="token punctuation">{</span>
	<span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token function">dosomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 全局混入：将混入对象传入</span>
Vue<span class="token punctuation">.</span><span class="token function">mixin</span><span class="token punctuation">(</span>mymixin<span class="token punctuation">)</span>

<span class="token comment">// 局部混入：做数组项设置到mixins选项，仅作用于当前组件</span>
<span class="token keyword">const</span> Comp <span class="token operator">=</span> <span class="token punctuation">{</span>
	<span class="token literal-property property">mixins</span><span class="token operator">:</span> <span class="token punctuation">[</span>mymixin<span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>插槽主要用于vue组件中的内容分发，也可以用于组件扩展。</li></ol><p>子组件Child</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span><span class="token punctuation">&gt;</span></span>这个内容会被父组件传递的内容替换<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>父组件Parent</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Child</span><span class="token punctuation">&gt;</span></span>来自老爹的内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Child</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果要精确分发到不同位置可以使用具名插槽，如果要使用子组件中的数据可以使用作用域插槽。</p><ol start="4"><li>组件选项中还有一个不太常用的选项extends，也可以起到扩展组件的目的</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 扩展对象</span>
<span class="token keyword">const</span> myextends <span class="token operator">=</span> <span class="token punctuation">{</span>
	<span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token function">dosomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 组件扩展：做数组项设置到extends选项，仅作用于当前组件</span>
<span class="token comment">// 跟混入的不同是它只能扩展单个对象</span>
<span class="token comment">// 另外如果和混入发生冲突，该选项优先级较高，优先起作用</span>
<span class="token keyword">const</span> Comp <span class="token operator">=</span> <span class="token punctuation">{</span>
	<span class="token keyword">extends</span><span class="token operator">:</span> myextends
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5"><li>混入的数据和方法不能明确判断来源且可能和当前组件内变量产生命名冲突，vue3中引入的composition api，可以很好解决这些问题，利用独立出来的响应式模块可以很方便的编写独立逻辑并提供响应式的数据，然后在setup选项中有机组合使用。例如：</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 复用逻辑1</span>
<span class="token keyword">function</span> <span class="token function">useXX</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token comment">// 复用逻辑2</span>
<span class="token keyword">function</span> <span class="token function">useYY</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token comment">// 逻辑组合</span>
<span class="token keyword">const</span> Comp <span class="token operator">=</span> <span class="token punctuation">{</span>
	<span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">const</span> <span class="token punctuation">{</span>xx<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useXX</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">const</span> <span class="token punctuation">{</span>yy<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useYY</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token punctuation">{</span>xx<span class="token punctuation">,</span> yy<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="可能的追问-2" tabindex="-1"><a class="header-anchor" href="#可能的追问-2" aria-hidden="true">#</a> 可能的追问</h3><p>Vue.extend方法你用过吗？它能用来做组件扩展吗？</p>`,29),S=n("li",null,"作用所扩展组件生成一个构造器，通常和$mount一起使用",-1),E=n("li",null,"ElementUI里的$message，我们使用this.$message('hello')的时候，其实就是通过这种方式创建一个组件实例，然后再将这个组件挂载到了body上",-1),D={href:"https://juejin.cn/post/6914970829621035021",target:"_blank",rel:"noopener noreferrer"},V=t('<h2 id="_6-子组件可以修改父组件中的数据吗-onw-way-data-flow" tabindex="-1"><a class="header-anchor" href="#_6-子组件可以修改父组件中的数据吗-onw-way-data-flow" aria-hidden="true">#</a> 6.子组件可以修改父组件中的数据吗 onw-way data flow</h2><h3 id="思路-1" tabindex="-1"><a class="header-anchor" href="#思路-1" aria-hidden="true">#</a> 思路</h3><ol><li>讲讲单项数据流原则，表明为何不能这么做</li><li>举几个场景场景的例子说说解决方案</li><li>结合实践讲讲如果需要修改父组件状态应该如何做</li></ol><h3 id="回答范例-3" tabindex="-1"><a class="header-anchor" href="#回答范例-3" aria-hidden="true">#</a> 回答范例</h3><ol><li>所有的prop都使得其父子之间形成了一个单选下行绑定；父级prop的更新会向下流动到子组件中，但是反过来不行。这样会防止从子组件意外变更父组件状态，从而导致你的应用的数据流向难以理解。另外，每次父级组件发生变更时，子组件所有的prop都将会刷新为最新的值。这意味着你不应该在一个子组件内部改变prop。如果你这样做了,Vue会在浏览器控制台中发出警告。 const props = defineProps([&#39;foo&#39;]) // ❌ 下面行为会被警告, props是只读的! props.foo = &#39;bar&#39;</li><li>实际开发过程中会有两个场景会想要修改一个属性 <ul><li>这个prop用来传递一个初始值；这个子组件接下来希望将其作为本地的prop数据来使用。再这种情况下，最好定义一个本地的data，并将这个prop用作初始值。const props = defineProps([&#39;initialCounter&#39;]) const counter = ref(props.initialCounter)</li><li>这个prop以一种原始的值传入且需要进行转换。再这种情况下，最好使用这个prop的值来定义一个计算属性：const props = defineProps([&#39;size&#39;]) // prop变化，计算属性自动更新 const normalizedSize = computed(() =&gt; props.size.trim().toLowerCase())</li></ul></li><li>实践中如果确实想要改变父组件属性应该emit一个事件，让父组件去做这个变更。注意虽然我们不能直接修改一个传入的对象或数组类型的prop，但是我们还是能够修改内嵌的对象或属性。</li></ol><h2 id="_7-vue项目权限管理如何做" tabindex="-1"><a class="header-anchor" href="#_7-vue项目权限管理如何做" aria-hidden="true">#</a> 7.Vue项目权限管理如何做</h2><h3 id="分析" tabindex="-1"><a class="header-anchor" href="#分析" aria-hidden="true">#</a> 分析</h3><p>综合实践题目，实际开发中经常需要面临权限管理的需求，考查实际应用能力。</p><p>权限管理一般需求是两个，页面权限和按钮权限，从这两个方面论述即可。</p><h3 id="思路-2" tabindex="-1"><a class="header-anchor" href="#思路-2" aria-hidden="true">#</a> 思路</h3><ol><li>权限管理需求分析：页面和按钮权限</li><li>权限系统的实现方案：分后端方案和前端方案阐述</li><li>说说各自的优缺点</li></ol><h3 id="回答范例-4" tabindex="-1"><a class="header-anchor" href="#回答范例-4" aria-hidden="true">#</a> 回答范例</h3><ol><li>权限管理一般需求是<strong>页面权限</strong>和<strong>按钮权限</strong>的管理</li><li>具体实现的时候分后端和前端两种方案 <ul><li>前端方案会<strong>把所有路由信息再前端配置</strong>，通过路由守卫要求用户登录，用户<strong>登录后根据角色过滤路由表</strong>。比如我会配置一个<code>asyncRoutes</code>数组，需要认证的页面在其路由的meta中添加一个roles字段，等获取用户角色之后取两者的交集，若结果不为空则说明可以访问。此过滤过程结束，剩下的路由就是改用户能访问的页面，<strong>最后通过router.addRoute(accessRoutes)方式动态添加路由</strong>即可。</li><li>后端方案会<strong>把所有页面路由信息存在数据库中</strong>，用户登录的时候根据其角色<strong>查询得到其能访问的所有页面路由信息</strong>返回给前端，前端<strong>再通过addRoutes动态添加路由</strong>信息</li><li>按钮权限的控制通常会<strong>实现一个指令</strong>，例如<code>v-permission</code>，<strong>将按钮要求角色通过值传递给v-permission指令</strong>，在指令的mounted钩子中可以<strong>判断当前用户角色和按钮是否存在交集</strong>，有则保留按钮，无则移除按钮</li></ul></li><li>纯前端方案的优点是实现简单，不需要额外权限管理页面，但是维护起来问题比较大，有新的页面和角色需求就要修改前端代码重新打包部署；服务端方案就不存在这个问题，通过专门的角色和权限管理页面，配置页面和按钮权限信息到数据库，应用每次登陆时获取的都是最新的路由信息，可谓一劳永逸！</li></ol><h3 id="知其所以然-3" tabindex="-1"><a class="header-anchor" href="#知其所以然-3" aria-hidden="true">#</a> 知其所以然</h3>',14),C={href:"https://github1s.com/PanJiaChen/vue-element-admin/blob/HEAD/src/permission.js#L13-L14",target:"_blank",rel:"noopener noreferrer"},L={href:"https://github1s.com/PanJiaChen/vue-element-admin/blob/HEAD/src/store/modules/permission.js#L50-L51",target:"_blank",rel:"noopener noreferrer"},P={href:"https://github1s.com/PanJiaChen/vue-element-admin/blob/HEAD/src/permission.js#L43-L44",target:"_blank",rel:"noopener noreferrer"},R=t(`<h3 id="可能的追问-3" tabindex="-1"><a class="header-anchor" href="#可能的追问-3" aria-hidden="true">#</a> 可能的追问</h3><ol><li>类似Tabs这类组件能不能使用v-permission指令实现按钮权限控制？</li></ol><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-tabs</span><span class="token punctuation">&gt;</span></span> 
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-tab-pane</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>⽤户管理<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>first<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>⽤户管理<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-tab-pane</span><span class="token punctuation">&gt;</span></span> 
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-tab-pane</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>⻆⾊管理<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>third<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>⻆⾊管理<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-tab-pane</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-tabs</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>服务端返回的路由信息如何添加到路由器中？</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 前端组件名和组件映射表</span>
<span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">//xx: require(&#39;@/views/xx.vue&#39;).default // 同步的⽅式</span>
  <span class="token function-variable function">xx</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;@/views/xx.vue&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 异步的⽅式</span>
<span class="token punctuation">}</span>
<span class="token comment">// 服务端返回的asyncRoutes</span>
<span class="token keyword">const</span> asyncRoutes <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;/xx&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token string">&#39;xx&#39;</span><span class="token punctuation">,</span><span class="token operator">...</span> <span class="token punctuation">}</span>
<span class="token punctuation">]</span>
<span class="token comment">// 遍历asyncRoutes，将component替换为map[component]</span>
<span class="token keyword">function</span> <span class="token function">mapComponent</span><span class="token punctuation">(</span><span class="token parameter">asyncRoutes</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  asyncRoutes<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">route</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    route<span class="token punctuation">.</span>component <span class="token operator">=</span> map<span class="token punctuation">[</span>route<span class="token punctuation">.</span>component<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>route<span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      route<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">child</span> <span class="token operator">=&gt;</span> <span class="token function">mapComponent</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">mapComponent</span><span class="token punctuation">(</span>asyncRoutes<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_8-说说对vue数据响应式的理解" tabindex="-1"><a class="header-anchor" href="#_8-说说对vue数据响应式的理解" aria-hidden="true">#</a> 8.说说对Vue数据响应式的理解</h2><h3 id="思路分析-1" tabindex="-1"><a class="header-anchor" href="#思路分析-1" aria-hidden="true">#</a> 思路分析</h3><ol><li>啥是响应式</li><li>为什么Vue需要响应式</li><li>它能给我们带来什么好处</li><li>Vue的响应式是怎么实现的？有哪些优缺点</li><li>Vue3中的响应式的新变化</li></ol><h3 id="回答范例-5" tabindex="-1"><a class="header-anchor" href="#回答范例-5" aria-hidden="true">#</a> 回答范例</h3><ol><li>所谓数据响应式就是能够使数据变化可以被检查并对这种变化做出响应的机制</li><li>mvvm框架中要解决的一个核心问题是连接数据层和视图层，通过数据驱动应用，数据变化，视图更新，要做到这点就需要对数据做响应式处理，这样一旦数据发生变化就可以立即做出更新处理</li><li>以vue为例说明，通过数据响应式加上虚拟dom和patch算法，可以使我们只需要操作数据，完全不用接触繁琐的dom操作，从而大大提升开发效率，降低开发难度</li><li>vue2中的数据响应式会根据数据类型来做不同处理，如果是对象则采用Object.defineProperty()的方式定义数据拦截，当数据被访问或发生变化时，我们感知并作出响应；如果是数组则通过覆盖该数组原型的办法，扩展它的7个变更方法，使这些方法可以额外的做更新通知，从而作出响应。这种机制很好的解决了数据响应化的问题，但在实际使用中也存在一些缺点：比如初始化时的递归遍历会造成性能损失；新增或删除属性时需要用户使用Vue.set/delete这样特殊的api才能生效；对于es6中新增的Map、Set这种数据结构不支持等问题</li><li>为了解决这些问题，vue3重新编写了这一部分的实现：利用ES6的proxy机制代理要响应化的数据，它有很多好处，编程体验一致，不需要使用特殊api，初始化性能和内存消耗都得到了大幅改善；另外由于响应化的实现代码抽取为独立的reactivity包，使得我们可以更灵活的使用它，我们甚至不需要引入vue都可以体验。</li></ol><h3 id="知其所以然-4" tabindex="-1"><a class="header-anchor" href="#知其所以然-4" aria-hidden="true">#</a> 知其所以然</h3>`,11),I={href:"https://github1s.com/vuejs/vue/blob/HEAD/src/core/observer/index.ts#L128",target:"_blank",rel:"noopener noreferrer"},T={href:"https://github1s.com/vuejs/core/blob/HEAD/packages/reactivity/src/reactive.ts#L89-L90",target:"_blank",rel:"noopener noreferrer"},$={href:"https://github1s.com/vuejs/core/blob/HEAD/packages/reactivity/src/ref.ts#L67-L68",target:"_blank",rel:"noopener noreferrer"},H=t('<h2 id="_9-虚拟dom" tabindex="-1"><a class="header-anchor" href="#_9-虚拟dom" aria-hidden="true">#</a> 9.虚拟DOM</h2><h3 id="思路-3" tabindex="-1"><a class="header-anchor" href="#思路-3" aria-hidden="true">#</a> 思路</h3><ol><li>vDom是什么</li><li>引入vDom的好处</li><li>vDom如何生成，又如何成为dom</li><li>再后续的diff中的作用</li></ol><h3 id="回答范例-6" tabindex="-1"><a class="header-anchor" href="#回答范例-6" aria-hidden="true">#</a> 回答范例</h3><ol><li>虚拟dom顾名思义就是虚拟的dom对象，它本身就是一个js对象，只不过它是通过不同的属性去描述一个视图结构</li><li>通过引入vDom我们可以获得如下好处： <ol><li><strong>将真实元素节点抽象成VNode，有效减少直接操作dom次数，从而提高程序性能</strong><ul><li>直接操作dom是有限制的，比如diff、clone等操作，一个真实元素上有许多的内容，如果直接对其进行diff操作，会去额外diff一些没有必要的内容；同样的，如果需要进行clone那么需要将其全部内容进行复制，这也是没有必要的。但是，如果将这些操作转移到js对象上，那么就会变的简单了</li><li>操作dom是比较昂贵的操作，频繁的dom操作容易引起页面的重绘和回流，但是通过抽象VNode进行中间处理，可以有效减少直接操作dom的次数，从而减少页面重绘和回流</li></ul></li><li><strong>方便实现跨平台</strong><ul><li>同一VNode节点可以渲染成不同平台上的对应的内容，比如：渲染在浏览器是dom元素节点，渲染在Native（IOS,Android）变为对应的控件、可以实现SSR、渲染到webGL中等等</li><li>vue3允许开发者基于VNode实现自定义渲染器（render），以便于针对不同平台进行渲染</li></ul></li></ol></li><li>vDom是如何生成？在vue中，我们常常会为组件编写模板-template,这个模板会被编译器-compiler编译为渲染函数，在接下来的挂载mount过程中会调用render函数，返回的对象就是虚拟dom。但是他们还不是真正的dom，所以在后续的patch过程中进一步转化为dom <img src="'+c+'" alt=""></li><li>挂载过程结束后，vue程序进入更新流程。如果某些响应式数据发生变化，将会引起组件重新render,此时就会生成新的vdom，和上一次的渲染结果diff就能得到变化的部分，从而转换为最小量的dom操作，高效更新试图。</li></ol><h3 id="知其所以然-5" tabindex="-1"><a class="header-anchor" href="#知其所以然-5" aria-hidden="true">#</a> 知其所以然</h3>',6),O={href:"https://github1s.com/vuejs/core/blob/HEAD/packages/runtime-core/src/vnode.ts#L127-L128",target:"_blank",rel:"noopener noreferrer"},B={href:"https://github1s.com/vuejs/core/blob/HEAD/packages/runtime-core/src/vnode.ts#L291-L292",target:"_blank",rel:"noopener noreferrer"},M={href:"https://github1s.com/vuejs/core/blob/HEAD/packages/runtime-core/src/vnode.ts#L486-L487",target:"_blank",rel:"noopener noreferrer"},F={href:"https://github1s.com/vuejs/core/blob/HEAD/packages/runtime-core/src/renderer.ts#L1171-L1172",target:"_blank",rel:"noopener noreferrer"},N=t('<h2 id="_10-diff算法" tabindex="-1"><a class="header-anchor" href="#_10-diff算法" aria-hidden="true">#</a> 10.diff算法</h2><h3 id="分析-1" tabindex="-1"><a class="header-anchor" href="#分析-1" aria-hidden="true">#</a> 分析</h3><p><img src="'+r+'" alt=""></p><h3 id="思路-4" tabindex="-1"><a class="header-anchor" href="#思路-4" aria-hidden="true">#</a> 思路</h3><ol><li>diff算法是干什么的</li><li>它的必要性</li><li>它何时执行</li><li>具体执行方式</li><li>拔高：说一下vue3中的优化</li></ol><h3 id="回答范例-7" tabindex="-1"><a class="header-anchor" href="#回答范例-7" aria-hidden="true">#</a> 回答范例</h3><ol><li>Vue中的diff算法称为patching算法，它由Snabbdom修改而来，虚拟DOM要想转化为真实DOM就需要通过patch方法转换</li><li>最初Vue1.x视图中每个依赖均有更新函数对应，可以做到精准更新，因此并不需要虚拟DOM和patching算法支持，但是这样粒度过细导致Vue1.x无法承载较大应用；Vue2.x中为了降低Watcher粒度，每个组件只有一个Watcher与之对应，此时就需要引入patching算法才能精准找到发生变化的地方并高效更新</li><li>vue中diff执行的时刻是组件内响应式数据变更触发实例执行其更新函数时，更新函数会再次执行render函数获得最新的虚拟DOM，然后执行patch函数，并传入新旧两次虚拟DOM,通过两者比对找到变化的地方，最后将其转化为对应的DOM操作</li><li>patch过程是一个递归过程，遵循深度优先、同层比较的策略；以Vue3的patch为例： <ol><li>首先判断两个节点是否为相同同类节点，不同则删除重新创建</li><li>如果双方都是文本则更新文本内容</li><li>如果双方都是元素节点则递归更新子元素，同时更新元素属性</li><li>更新子节点时又分了几种情况 <ul><li>新的子节点是文本，老的子节点是数组则清空，并设置文本；</li><li>新的子节点是文本，老的子节点是文本，则直接更新文本；</li><li>新的子节点是数组，老的子节点是文本，则清空文本，并创建新子节点数组中的子元素</li><li>新的子节点是数组，老的子节点是数组，那么比较两组子节点， <ul><li>首首：老开始和新开始相同，打补丁，游标同时向后移动</li><li>尾尾：老结束和新结束相同，打补丁，游标向前移动</li><li>首尾：老开始和新结束相同，打补丁，游标移动</li><li>尾首：老结束和新开始相同，打补丁，游标移动</li><li>首尾没有找到相同，老老实实查找</li></ul></li></ul></li></ol></li><li>vue3中引入的更新策略：编译期优化patchFlags、block等</li></ol><h3 id="知其所以然-6" tabindex="-1"><a class="header-anchor" href="#知其所以然-6" aria-hidden="true">#</a> 知其所以然</h3>',8),U={href:"https://github1s.com/vuejs/core/blob/HEAD/packages/runtime-core/src/renderer.ts#L354-L355",target:"_blank",rel:"noopener noreferrer"},z=n("h2",{id:"_11-说说你知道的vue3新特性",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_11-说说你知道的vue3新特性","aria-hidden":"true"},"#"),a(" 11.说说你知道的vue3新特性")],-1),W=n("h3",{id:"分析-2",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#分析-2","aria-hidden":"true"},"#"),a(" 分析")],-1),K={href:"https://v3-migration.vuejs.org/zh/",target:"_blank",rel:"noopener noreferrer"},J=t('<p>也就是下面这些</p><ul><li>Composition API</li><li>SFC Composition API语法糖</li><li>Teleport传送门</li><li>Fragments片段</li><li>Emits选项</li><li>自定义渲染器</li><li>SFC CSS变量</li><li>Suspense 以上这些是api相关，另外还有很多框架特性</li></ul><h3 id="回答范例-8" tabindex="-1"><a class="header-anchor" href="#回答范例-8" aria-hidden="true">#</a> 回答范例</h3><ol><li>api层面Vue3新特性主要包括：Composition API、SFC Composition API语法糖、Teleport传送门、Fragments 片段、Emits选项、自定义渲染器、SFC CSS变量、Suspense</li><li>另外，Vue3.0在框架层面也有很多亮眼的改进： <ul><li>更快 <ul><li>虚拟DOM重写</li><li>编译器优化：静态提示、patchFlags、block等</li><li>基于Proxy的响应式系统</li></ul></li><li>更小：更好的摇树优化</li><li>更容易维护：TypeScript + 模块化</li><li>更容易扩展 <ul><li>独立的响应化模块</li><li>自定义渲染器</li></ul></li></ul></li></ol><h3 id="知其所以然-7" tabindex="-1"><a class="header-anchor" href="#知其所以然-7" aria-hidden="true">#</a> 知其所以然</h3>',5),X={href:"https://sfc.vuejs.org/",target:"_blank",rel:"noopener noreferrer"},G={href:"https://github1s.com/vuejs/core/blob/HEAD/packages/reactivity/src/reactive.ts#L90-L91",target:"_blank",rel:"noopener noreferrer"},Q=t('<h2 id="_12-vue-router动态路由有什么用" tabindex="-1"><a class="header-anchor" href="#_12-vue-router动态路由有什么用" aria-hidden="true">#</a> 12.vue-router动态路由有什么用？</h2><h3 id="思路-5" tabindex="-1"><a class="header-anchor" href="#思路-5" aria-hidden="true">#</a> 思路</h3><ol><li>什么是动态路由</li><li>什么时候使用动态路由，怎么定义动态路由</li><li>参数如何获取</li><li>细节，注意事项</li></ol><h3 id="回答范例-9" tabindex="-1"><a class="header-anchor" href="#回答范例-9" aria-hidden="true">#</a> 回答范例</h3><ol><li>很多时候，我们需要<strong>将给定匹配模式的路由映射到同一个组件</strong>，这种情况就需要定义动态路由</li><li>例如，我们可能有一个 User 组件，它应该对所有用户进行渲染，但用户 ID 不同。在 Vue Router 中，我们可以在路径中使用一个动态字段来实现，例如：<code>{ path: &#39;/users/:id&#39;, component: User }</code>，其中:id就是路径参数</li><li>路径参数 用冒号 : 表示。当一个路由被匹配时，它的 params 的值将在每个组件中以<code>this.$route.params</code>的形式暴露出来。</li><li>参数还可以有多个，例如<code>/users/:username/posts/:postId</code>；除了<code>$route.params</code>之外，<code>$route</code>对象还公开了其他有用的信息，如<code>$route.query</code>、<code>$route.hash</code>等。</li></ol><h3 id="可能的追问-4" tabindex="-1"><a class="header-anchor" href="#可能的追问-4" aria-hidden="true">#</a> 可能的追问</h3>',6),Y={href:"https://router.vuejs.org/zh/guide/essentials/dynamic-matching.html#%E5%93%8D%E5%BA%94%E8%B7%AF%E7%94%B1%E5%8F%82%E6%95%B0%E7%9A%84%E5%8F%98%E5%8C%96",target:"_blank",rel:"noopener noreferrer"},Z={href:"https://router.vuejs.org/zh/guide/essentials/dynamic-matching.html#%E6%8D%95%E8%8E%B7%E6%89%80%E6%9C%89%E8%B7%AF%E7%94%B1%E6%88%96-404-Not-found-%E8%B7%AF%E7%94%B1",target:"_blank",rel:"noopener noreferrer"},nn=t('<h2 id="_13-如何实现一个vue-router" tabindex="-1"><a class="header-anchor" href="#_13-如何实现一个vue-router" aria-hidden="true">#</a> 13.如何实现一个vue-router?</h2><h3 id="思路分析-2" tabindex="-1"><a class="header-anchor" href="#思路分析-2" aria-hidden="true">#</a> 思路分析</h3><p>首先思考Vue路由要解决的问题：用户点击跳转链接内容切换，页面不刷新</p><ul><li>借助hash或者history api实现url跳转页面不刷新</li><li>同时监听hashchange事件或者popstate事件处理跳转</li><li>根据hash值或者state值从routes表中匹配对应component并渲染它</li></ul><h3 id="回答范例-10" tabindex="-1"><a class="header-anchor" href="#回答范例-10" aria-hidden="true">#</a> 回答范例</h3><p>一个SPA应用的路由需要解决的问题是<strong>页面跳转内容改变同时不刷新</strong>，同时路由还需要以插件形式存在，所以：</p><ol><li>首先我会定义一个<code>createRouter</code>函数，返回路由器实例，实例内部做几件事 <ol><li>保存用户传入的配置项</li><li>监听hash或者popstate事件</li><li>回调里根据patch匹配对应路由</li></ol></li><li>将router定义成一个Vue插件，既实现install方法，内部做两件事： <ol><li>实现两个全局组件：<code>router-link</code>和<code>router-view</code>，分别实现页面跳转和内容显示</li><li>定义两个全局变量：<code>$route</code>和<code>$router</code>，组件内可以访问当前路由和路由器实例</li></ol></li></ol><h3 id="知其所以然-8" tabindex="-1"><a class="header-anchor" href="#知其所以然-8" aria-hidden="true">#</a> 知其所以然</h3>',8),an={href:"https://github1s.com/vuejs/router/blob/HEAD/src/router.ts#L355-L356",target:"_blank",rel:"noopener noreferrer"},sn={href:"https://github1s.com/vuejs/router/blob/HEAD/src/history/html5.ts#L314-L315",target:"_blank",rel:"noopener noreferrer"},en={href:"https://github1s.com/vuejs/router/blob/HEAD/src/RouterLink.ts#L184-L185",target:"_blank",rel:"noopener noreferrer"},tn={href:"https://github1s.com/vuejs/router/blob/HEAD/src/RouterView.ts#L43-L44",target:"_blank",rel:"noopener noreferrer"},pn=t(`<h2 id="_14-key的作用" tabindex="-1"><a class="header-anchor" href="#_14-key的作用" aria-hidden="true">#</a> 14.key的作用</h2><h3 id="思路-6" tabindex="-1"><a class="header-anchor" href="#思路-6" aria-hidden="true">#</a> 思路</h3><ol><li>给出结论，key的作用是用于优化patch性能</li><li>key的必要性</li><li>实际使用方式</li><li>总结：可从源码层面描述一下vue如何判断两个节点是否想过</li></ol><h3 id="回答范例-11" tabindex="-1"><a class="header-anchor" href="#回答范例-11" aria-hidden="true">#</a> 回答范例</h3><ol><li>key的作用主要是为了更高效的更新虚拟DOM</li><li>vue在patch过程中<strong>判断两个节点是否是相同节点是key是一个必要条件</strong>，渲染一组列表时，key往往是唯一标识，所以如果不定义key的话，vue只能认为比较的两个节点是同一个，哪怕它们实际上不是，这导致了频繁更新元素，使得整个patch过程比较低效，影响性能。</li><li>实际使用中在渲染一组列表时key必须设置，而且必须是唯一标识，应该避免使用数组索引作为key，这可能导致一些隐藏的bug；vue中在使用相同标签元素过渡切换时，也会使用key属性，其目的也是为了让vue可以区分它们，否则vue只会替换其内部属性而不会触发过渡效果。</li><li>从源码中可以知道，vue判断两个节点是否相同时主要判断两个的key和元素类型等，因此如果不设置key，它的值就是undefined，则永远认为这是两个相同节点，只能去做更新操作，这造成了大量的dom更新操作，明显是不可取的。</li></ol><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item in items<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>{{item}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">export</span> <span class="token keyword">default</span><span class="token punctuation">{</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">items</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;d&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;e&#39;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">mounted</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&#39;f&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面案例重现的是以下过程</p><p><img src="`+u+'" alt=""></p><p>不使用key</p><p><img src="'+d+`" alt=""></p><p>如果使用key</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>// 首次循环patch A
A B C D E
A B F C D E

// 第2次循环patch B
B C D E
B F C D E

// 第3次循环patch E
C D E
F C D E

// 第4次循环patch D
C D
F C D

// 第5次循环patch C
C 
F C

// oldCh全部处理结束，newCh中剩下的F，创建F并插入到C前面
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_15-nexttick使用和原理" tabindex="-1"><a class="header-anchor" href="#_15-nexttick使用和原理" aria-hidden="true">#</a> 15.nextTick使用和原理</h2><h3 id="思路-7" tabindex="-1"><a class="header-anchor" href="#思路-7" aria-hidden="true">#</a> 思路</h3><ol><li>nextTick是啥？下定义</li><li>为什么需要它？用异步更新队列实现原理解释</li><li>我再什么地方用它呢？</li><li>介绍如何使用</li><li>说出源码实现</li></ol><p>先看看官方订阅</p><blockquote><p>Vue.nextTick( [callback, context] ) 在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM。</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 修改数据</span>
vm<span class="token punctuation">.</span>msg <span class="token operator">=</span> <span class="token string">&#39;Hello&#39;</span>
<span class="token comment">// DOM 还没有更新</span>
Vue<span class="token punctuation">.</span><span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token comment">// DOM 更新了</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="回答范例-12" tabindex="-1"><a class="header-anchor" href="#回答范例-12" aria-hidden="true">#</a> 回答范例</h3><ol><li>nextTick是Vue提供的一个全局API，由于vue的异步更新策略导致我们对数据的修改不会立刻体现在dom变化上，此时如果想要立即获取更新后的dom状态，就需要使用这个方法</li><li>Vue在更新DOM时是异步执行的。只要侦听到数据变化，Vue将开启一个队列，并缓冲在同一事件循环中发生的所有数据变更，如果同一个watcher被多次触发，只会被推入到队列中一次。这种在缓冲时去除重复数据对于避免不必要的计算和DOM操作所非常重要的。 nextTick方法会在队列中加入一个回调函数，确保该函数在前面的dom操作完成后才调用。</li><li>所以当我们想在修改数据后立即看到dom执行结果就需要用到nextTick方法。</li><li>我也有简单了解nextTick实现，它会在callbacks里面加入我们传入的函数，然后用timeFunc异步方式调用它们，首选的异步方式会是promise。这让我明白了为什么可以在nextTick中看到dom操作结果。</li></ol><h3 id="回答范例-13" tabindex="-1"><a class="header-anchor" href="#回答范例-13" aria-hidden="true">#</a> 回答范例</h3>`,21),on={href:"https://cn.vuejs.org/api/general.html#nexttick",target:"_blank",rel:"noopener noreferrer"},ln=n("li",null,"Vue有个异步更新策略，意思是如果数据变化，Vue不会立即更新DOM，而是开启一个队列，把组件更新函数保存在队列中，在同一事件循环中发生的所有数据变更会异步的批量更新。这一策略导致我们对数据的修改不会立刻体现在DOM上，此时如果想要获取更新后的DOM状态，就需要使用nextTick",-1),cn=n("li",null,[a("开发时，有两个场景我们会用到nextTick: "),n("ol",null,[n("li",null,"created中想要获取DOM时"),n("li",null,"响应式数据变化后获取DOM更新后的状态，比如希望获取列表更新后的高度")])],-1),rn=n("li",null,[a("nextTick签名如下："),n("code",null,"function nextTick(callback? () => void): Promise<void>"),a(" 所以我们只需要在传入的回调函数中访问最新DOM状态即可，或者我们可以await nextTick()方法返回的Promise之后做这件事")],-1),un=n("li",null,"在Vue内部，nextTick之所以能够让我们看到DOM更新后的结果，是因为我们传入的callback会被添加到队列刷新函数（flushSchedulerQueue）后面，这样等队列内部的更新函数都执行完毕，所有DOM操作也就结束了，callback自然能够获取到最新的DOM值",-1),dn=n("h3",{id:"知其所以然-9",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#知其所以然-9","aria-hidden":"true"},"#"),a(" 知其所以然")],-1),kn={href:"https://github1s.com/vuejs/core/blob/HEAD/packages/runtime-core/src/renderer.ts#L1547-L1548",target:"_blank",rel:"noopener noreferrer"},vn={href:"https://github1s.com/vuejs/core/blob/HEAD/packages/runtime-core/src/scheduler.ts#L79",target:"_blank",rel:"noopener noreferrer"},hn={href:"https://github1s.com/vuejs/core/blob/HEAD/packages/runtime-core/src/scheduler.ts#L53",target:"_blank",rel:"noopener noreferrer"},mn=n("h2",{id:"_16-computed和watch的区别",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_16-computed和watch的区别","aria-hidden":"true"},"#"),a(" 16.computed和watch的区别")],-1),bn=n("h3",{id:"思路-8",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#思路-8","aria-hidden":"true"},"#"),a(" 思路")],-1),gn={href:"https://cn.vuejs.org/api/reactivity-core.html#computed",target:"_blank",rel:"noopener noreferrer"},fn={href:"https://cn.vuejs.org/api/reactivity-core.html#watch",target:"_blank",rel:"noopener noreferrer"},yn=n("li",null,"列举使用场景上的差异，如何选择",-1),_n=n("li",null,"使用细节、注意实现",-1),xn=n("li",null,"vue3变化",-1),wn=t('<h3 id="回答范例-14" tabindex="-1"><a class="header-anchor" href="#回答范例-14" aria-hidden="true">#</a> 回答范例</h3><ol><li>计算属性可以<strong>从组件数据派生出新数据</strong>，最常见的使用方式是设置一个函数，返回计算之后的具有响应式的结果，computed和methods的差异所它具备缓存性，如果依赖项不变时不会重新计算。侦听器<strong>可以侦测某个响应式数据的变化并执行副作用</strong>，常见用法是传递一个函数，执行副作用，watch没有返回值，但可以执行异步操作等复杂逻辑</li><li>计算属性常见场景是简化行内模板中的复杂表达式，模板中出现太多逻辑会使模板变得臃肿不易维护。侦听器常见场景是状态变化之后做一些往额外的DOM操作或异步操作。选择采用何种方案时首先看是否需要派生出新值，基本能用计算属性实现的方式首选计算属性</li><li>使用过程中有一些细节，比如计算属性也是可以传递对象，成为既可读又可写的计算属性。watch可以传递对象，设置deep、immediate等选项</li><li>vue3watch选项发生了一些变化，例如不再能监测一个点操作符之外的字符串的表达式；reactivity API中新出现了watch、watchEffect可以完全替代目前的watch选项，且功能更加强大</li></ol><h3 id="可能的追问-5" tabindex="-1"><a class="header-anchor" href="#可能的追问-5" aria-hidden="true">#</a> 可能的追问</h3>',3),jn=n("li",null,"watch会不会立即执行？ 看immediate",-1),qn={href:"https://cn.vuejs.org/guide/essentials/watchers.html#watcheffect",target:"_blank",rel:"noopener noreferrer"},An=n("h3",{id:"知其所以然-10",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#知其所以然-10","aria-hidden":"true"},"#"),a(" 知其所以然")],-1),Sn={href:"https://github1s.com/vuejs/core/blob/HEAD/packages/reactivity/src/computed.ts#L79-L80",target:"_blank",rel:"noopener noreferrer"},En={href:"https://github1s.com/vuejs/core/blob/HEAD/packages/reactivity/src/computed.ts#L26-L27",target:"_blank",rel:"noopener noreferrer"},Dn={href:"https://github1s.com/vuejs/core/blob/HEAD/packages/reactivity/src/computed.ts#L45-L60",target:"_blank",rel:"noopener noreferrer"},Vn={href:"https://github1s.com/vuejs/core/blob/HEAD/packages/runtime-core/src/apiWatch.ts#L172",target:"_blank",rel:"noopener noreferrer"},Cn=t('<h2 id="_17-父子组件创建-挂载顺序所怎样的" tabindex="-1"><a class="header-anchor" href="#_17-父子组件创建-挂载顺序所怎样的" aria-hidden="true">#</a> 17.父子组件创建，挂载顺序所怎样的</h2><h3 id="思路-9" tabindex="-1"><a class="header-anchor" href="#思路-9" aria-hidden="true">#</a> 思路</h3><ol><li>给结论</li><li>阐述理由</li></ol><h3 id="回答范例-15" tabindex="-1"><a class="header-anchor" href="#回答范例-15" aria-hidden="true">#</a> 回答范例</h3><ol><li>创建过程自上而下，挂载过程自下而上： <ul><li>parent created</li><li>child created</li><li>child mounted</li><li>parent mounted</li></ul></li><li>之所以会这样所因为Vue创建过程是一个递归过程，先创建父组件，有子组件就会创建子组件，因此创建时先有父组件再有子组件；子组件首次创建时会添加mounted钩子到队列，等到patch结束再执行它们，可见子组件的mounted钩子是先进入队列中的，因此等到patch结束执行这些钩子时也先执行。</li></ol><h3 id="知其所以然-11" tabindex="-1"><a class="header-anchor" href="#知其所以然-11" aria-hidden="true">#</a> 知其所以然</h3>',6),Ln={href:"https://github1s.com/vuejs/core/blob/HEAD/packages/runtime-core/src/componentOptions.ts#L554-L555",target:"_blank",rel:"noopener noreferrer"},Pn={href:"https://github1s.com/vuejs/core/blob/HEAD/packages/runtime-core/src/renderer.ts#L1310-L1311",target:"_blank",rel:"noopener noreferrer"},Rn=t(`<h2 id="_18-如何缓存组件、缓存后怎么更新" tabindex="-1"><a class="header-anchor" href="#_18-如何缓存组件、缓存后怎么更新" aria-hidden="true">#</a> 18.如何缓存组件、缓存后怎么更新？</h2><p>缓存组件使用keep-alive组件，这是一个常见且有用的优化手段，vue3中keep-alive也有比较大的更新，能说的点比较多</p><h3 id="思路-10" tabindex="-1"><a class="header-anchor" href="#思路-10" aria-hidden="true">#</a> 思路</h3><ol><li>缓存用keep-alive，它的作用与用法</li><li>使用细节，例如缓存指定/排除、结合router和transition</li><li>组件缓存后更新可以利用activated或者beforeRouteEnter</li><li>原理阐述</li></ol><h3 id="回答范例-16" tabindex="-1"><a class="header-anchor" href="#回答范例-16" aria-hidden="true">#</a> 回答范例</h3><ol><li>开发中缓存组件使用keep-alive组件，keep-alive是vue内置组件，keep-alive包裹动态组件component时，会缓存不活动的组件实例，而不是销毁它们，这样在组件切换过程中将状态保留在内存中，防止重复渲染DOM</li></ol><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>keep-alive</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span> <span class="token attr-name">:is</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>view<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>component</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>keep-alive</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>结合属性include和exclude可以明确指定缓存哪些组件或排除缓存指定组件。vue3结合vue-router时变化较大，之前所keep-alive包裹router-view，现在需要反过来用router-view包裹keep-alive</li></ol><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span> <span class="token attr-name">v-slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{ Component }<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>keep-alive</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span> <span class="token attr-name">:is</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Component<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>component</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>keep-alive</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>缓存后如果想要获取数据，解决方案可以有以下两种：</li></ol><ul><li>beforeRouteEnter：在有vue-router的项目，每次进入路由的时候，都会执行beforeRouteEnter</li><li>actived：在keep-alive缓存的组件被激活的时候，都会执行actived钩子</li></ul><ol start="4"><li>keep-alive是一个通用组件，它内部定义了一个map，缓存创建过的组件实例，它返回的渲染函数内部会查找内嵌的component组件对应组件的vnode，如果该组件在map中存在就直接返回它。由于component的is属性是个响应式数据，因此只要它变化，keep-alive的render函数就会重新执行。</li></ol><h3 id="知其所以然-12" tabindex="-1"><a class="header-anchor" href="#知其所以然-12" aria-hidden="true">#</a> 知其所以然</h3>`,13),In={href:"https://github1s.com/vuejs/core/blob/HEAD/packages/runtime-core/src/components/KeepAlive.ts#L73-L74",target:"_blank",rel:"noopener noreferrer"},Tn={href:"https://github1s.com/vuejs/core/blob/HEAD/packages/runtime-core/src/components/KeepAlive.ts#L102-L103",target:"_blank",rel:"noopener noreferrer"},$n={href:"https://github1s.com/vuejs/core/blob/HEAD/packages/runtime-core/src/components/KeepAlive.ts#L215-L216",target:"_blank",rel:"noopener noreferrer"},Hn={href:"https://github1s.com/vuejs/core/blob/HEAD/packages/runtime-core/src/components/KeepAlive.ts#L241-L242",target:"_blank",rel:"noopener noreferrer"},On=t('<h2 id="_19-如何从0到1架构一个vue项目" tabindex="-1"><a class="header-anchor" href="#_19-如何从0到1架构一个vue项目" aria-hidden="true">#</a> 19.如何从0到1架构一个vue项目</h2><h3 id="思路-11" tabindex="-1"><a class="header-anchor" href="#思路-11" aria-hidden="true">#</a> 思路</h3><ol><li>构建项目，创建项目基本结构</li><li>引入必要的插件</li><li>代码规范：prettier eslint</li><li>提交规范：husky list-staged</li><li>其他常用：svg-loader vueuse nprogress</li><li>常见目录结构</li></ol><h3 id="回答范例-17" tabindex="-1"><a class="header-anchor" href="#回答范例-17" aria-hidden="true">#</a> 回答范例</h3><ol><li>从0创建一个项目我大致会做以下事情：项目创建、引入必要插件、代码规范、提交规范、常用库和组件</li><li>目前vue3项目我会用vite或者create-vue创建项目</li><li>接下来引入必要插件：路由vue-router、状态管理pinia、ui库element-plus、http工具axios</li><li>其他比较常用的库有vueuse、nprogress，图标使用icon-moon</li><li>下面是代码规范：结合prettier和eslint</li><li>最后是提交规范，可以使用husky、lint-staged、commitlint</li><li>目录结构 <ul><li>plugins:用来放 vite 插件的 plugin 配置</li><li>public：用来放一些诸如 页头icon 之类的公共文件，会被打包到dist根目录下</li><li>src：用来放项目代码文件</li><li>api：用来放http的一些接口配置</li><li>assets：用来放一些 CSS 之类的静态资源</li><li>components：用来放项目通用组件</li><li>layout：用来放项目的布局</li><li>router：用来放项目的路由配置</li><li>store：用来放状态管理Pinia的配置</li><li>utils：用来放项目中的工具方法类</li><li>views：用来放项目的页面文件</li></ul></li></ol><h2 id="_20-你知道哪些vue最佳实践" tabindex="-1"><a class="header-anchor" href="#_20-你知道哪些vue最佳实践" aria-hidden="true">#</a> 20.你知道哪些Vue最佳实践？</h2><p><img src="'+k+'" alt=""></p><h3 id="思路-12" tabindex="-1"><a class="header-anchor" href="#思路-12" aria-hidden="true">#</a> 思路</h3><p>查看vue官方文档</p>',9),Bn={href:"https://vuejs.org/style-guide/",target:"_blank",rel:"noopener noreferrer"},Mn={href:"https://vuejs.org/guide/best-practices/performance.html#overview",target:"_blank",rel:"noopener noreferrer"},Fn={href:"https://vuejs.org/guide/best-practices/security.html",target:"_blank",rel:"noopener noreferrer"},Nn={href:"https://vuejs.org/guide/best-practices/accessibility.html",target:"_blank",rel:"noopener noreferrer"},Un={href:"https://vuejs.org/guide/best-practices/production-deployment.html",target:"_blank",rel:"noopener noreferrer"},zn=t('<h3 id="回答范例-18" tabindex="-1"><a class="header-anchor" href="#回答范例-18" aria-hidden="true">#</a> 回答范例</h3><p>从编码风格、性能、安全等几方面说几条：</p><ol><li>编码风格方面 <ol><li>命名组件时使用“多词”风格避免和HTML元素冲突</li><li>使用“细节化”方式定义属性而不是只有一个属性名</li><li>属性名声明时使用“驼峰命名”，模板或jsx中使用“肉串命名”</li><li>使用v-for时务必加上key，且不要跟v-if写在一起</li></ol></li><li>性能方面 <ol><li>路由懒加载减少应用尺寸</li><li>利用SSR减少首屏加载时间</li><li>利用v-once渲染那些不需要更新的内容</li><li>一些长列表可以利用虚拟滚动技术避免内存过度占用</li><li>对于深层嵌套对象的大数组可以使用shallowRef或shallowReactive降低开销</li><li>避免不必要的组件抽象</li></ol></li><li>安全方面 <ol><li>不使用不可信模板，例如使用用户输入拼接模板：template: <div> + userProvidedString + </div></li><li>小心使用v-html，:url，:style等，避免html、url、样式等注入</li></ol></li></ol><h2 id="_21-说说对vuex的理解" tabindex="-1"><a class="header-anchor" href="#_21-说说对vuex的理解" aria-hidden="true">#</a> 21.说说对vuex的理解</h2><p>单向数据流</p><p><img src="https://vuex.vuejs.org/flow.png" alt=""></p><p>vuex <img src="https://vuex.vuejs.org/vuex.png" alt=""></p><h3 id="回答策略-3w1h" tabindex="-1"><a class="header-anchor" href="#回答策略-3w1h" aria-hidden="true">#</a> 回答策略：3w1h</h3><ol><li>首先给vuex下一个定义</li><li>必要性阐述，解决了哪些问题</li><li>什么时候我们需要vuex</li><li>你的具体用法，个人思考，实践经验</li><li>简述原理</li></ol><blockquote><p>官网定义 Vuex 是一个专为 Vue.js 应用程序开发的<strong>状态管理模式</strong>。它采用<strong>集中式</strong>存储管理应用的所有组件的状态，并以相应的规则保证状态以一种<strong>可预测</strong>的方式发生变化。</p></blockquote><h3 id="回答范例-19" tabindex="-1"><a class="header-anchor" href="#回答范例-19" aria-hidden="true">#</a> 回答范例</h3><ol><li>Vuex 是一个专为 Vue.is 应用开发的状态管理模式+库。它采用集中式存储，管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。</li><li>我们期待以一种简单的“单向数据流”的方式管理应用，即状态-&gt;视图-&gt;操作单向循环的方式。但当我们的应用遇到多个组件共享状态时，比如:多个视图依赖于同一状态或者来自不同视图的行为需要变更同一状态。此时单向数据流的简洁性很容易被破坏。因此，我们有必要把组件的共享状态抽取出来，以一个全局单例模式管理。通过定义和隔离状态管理中的各种概念并通过强制规则维持视图和状态间的独立性，我们的代码将会变得更结构化且易维护。这是vuex存在的必要性，它和react生态中的redux之类是一个概念。</li><li>vuex并非必须的，它帮我们管理共享状态，但却带来更多的概念和框架。Vuex 解决状态管理的同时引入了不少概念: 例如state、mutation、action等，是否需要引入还需要根据应用的实际情况衡量一下:如果不打算开发大型单页应用，使用 Vuex 反而是繁琐几余的，一个简单的 store 模式就足够了。但是，如果要构建一个中大型单页应用，Vuex 基本是标配</li><li>我在使用vuex过程中有如下理解：首先是对核心概念的理解和运用，将全局状态放入state对象中，它本身一棵状态树，组件中使用store实例的state访问这些状态；然后有配套的mutation方法修改这些状态，并且只能用mutation修改状态，在组件中调用commit方法提交mutation；如果应用中有异步操作或者复杂逻辑组合，我们需要编写action，执行结束如果有状态修改仍然需要提交mutation，组件中调用这些action使用dispatch方法派发。最后是模块化，通过modules选项组织拆分出去的各个子模块，在访问状态时注意添加子模块的名称，如果子模块有设置namespace，那么在提交mutation和派发action时还需要额外的命名空间前缀。</li><li>vuex在实现单项数据流时需要做到数据的响应式，通过源码的学习发现是借用了vue的数据响应化特性实现的，它会利用Vue将state作为data对其进行响应化处理，从而使得这些状态发生变化时，能够导致组件重新渲染。</li></ol><h2 id="_22-从template到render发生了什么" tabindex="-1"><a class="header-anchor" href="#_22-从template到render发生了什么" aria-hidden="true">#</a> 22.从template到render发生了什么？</h2><h3 id="分析-3" tabindex="-1"><a class="header-anchor" href="#分析-3" aria-hidden="true">#</a> 分析</h3><p>从template到render过程，其实是问vue编译器原理</p><h3 id="思路-13" tabindex="-1"><a class="header-anchor" href="#思路-13" aria-hidden="true">#</a> 思路</h3><ol><li>引入vue编译器概念</li><li>说明编译器的必要性</li><li>阐述编译器工作流程</li></ol><h3 id="回答范例-20" tabindex="-1"><a class="header-anchor" href="#回答范例-20" aria-hidden="true">#</a> 回答范例</h3><ol><li>vue中有个独特的模块，称为“compiler”，它的主要作用是将用户编写的template编译为js中可执行的render函数</li><li>之所以需要这个编译过程是为了便于前端程序员能高效的编写视图模板。相比而言，我们还是更愿意用HTML来编写视图，直观且高效。手写render函数不仅效率低下，而且失去了编译期的优化能力</li><li>在Vue中编译器会先对template进行解析，这一步称为parse，结束之后的会得到一个js对象，我们称为抽象语法树AST，然后是对AST进行深加工的转换过程，这一步称为transform，最后将前面得到的AST生成JS代码，也就是render函数</li></ol><h3 id="知其所以然-13" tabindex="-1"><a class="header-anchor" href="#知其所以然-13" aria-hidden="true">#</a> 知其所以然</h3>',20),Wn={href:"https://github1s.com/vuejs/core/blob/HEAD/packages/compiler-core/src/compile.ts#L61-L62",target:"_blank",rel:"noopener noreferrer"},Kn=t('<h3 id="可能的追问-6" tabindex="-1"><a class="header-anchor" href="#可能的追问-6" aria-hidden="true">#</a> 可能的追问</h3><ol><li>vue中编译器何时执行？ 根据引入vue的运行时不同而不同。 <ul><li>webpack，预打包环境，vue-loader，在打包阶段将模板编译，预编译</li><li>非运行时版本，携带编译器的vue版本，编译发生在运行时，组件创建阶段，发现组件没有render函数就会编译template</li></ul></li><li>react有没有编译器？ <ul><li>jsx 不是编译器(compiler)，语言没有发生变化，是转义器(transpiler)，将jsx转成js，严格来说，没有编译器</li></ul></li></ol><h2 id="_23-vue实例挂载过程发生了什么" tabindex="-1"><a class="header-anchor" href="#_23-vue实例挂载过程发生了什么" aria-hidden="true">#</a> 23.vue实例挂载过程发生了什么？</h2><h3 id="分析-4" tabindex="-1"><a class="header-anchor" href="#分析-4" aria-hidden="true">#</a> 分析</h3><p>挂载过程完成了最重要的两件事：</p><ol><li>初始化</li><li>建立更新机制（数据与视图关联）</li></ol><h3 id="回答范例-21" tabindex="-1"><a class="header-anchor" href="#回答范例-21" aria-hidden="true">#</a> 回答范例</h3><ol><li>挂载过程指的是app.mount()过程，这个是个初始化过程，整体上做了两件事：初始化和建立更新机制</li><li>初始化会创建组件实例，初始化组件状态，创建各种响应式数据</li><li>建立更新机制这一步会立即执行一次组件更新函数，这会首次执行组件渲染函数并执行patch将前面获得vnode转换为dom；同时首次执行渲染函数会创建它内部响应式数据和组件更新函数之间的依赖关系，这使得以后数据变化时会执行对应的更新函数</li></ol><h3 id="知其所以然-14" tabindex="-1"><a class="header-anchor" href="#知其所以然-14" aria-hidden="true">#</a> 知其所以然</h3>',9),Jn={href:"https://github1s.com/vuejs/core/blob/HEAD/packages/runtime-core/src/apiCreateApp.ts#L319",target:"_blank",rel:"noopener noreferrer"},Xn={href:"https://github1s.com/vuejs/core/blob/HEAD/packages/runtime-core/src/renderer.ts#L2320",target:"_blank",rel:"noopener noreferrer"},Gn=t(`<h3 id="可能的追问-7" tabindex="-1"><a class="header-anchor" href="#可能的追问-7" aria-hidden="true">#</a> 可能的追问</h3><ol><li>响应式数据怎么创建</li><li>依赖关系如何建立</li></ol><h2 id="_24-vue3设计目标和优化点有哪些" tabindex="-1"><a class="header-anchor" href="#_24-vue3设计目标和优化点有哪些" aria-hidden="true">#</a> 24.Vue3设计目标和优化点有哪些？</h2><h3 id="思路-14" tabindex="-1"><a class="header-anchor" href="#思路-14" aria-hidden="true">#</a> 思路</h3><p>从以下几方面分门别类阐述：易用性、性能、扩展性、可维护性、开发体验等</p><h3 id="回答范例-22" tabindex="-1"><a class="header-anchor" href="#回答范例-22" aria-hidden="true">#</a> 回答范例</h3><ol><li>Vue3的最大设计目标所替代Vue2，为了实现这一点，Vue3在以下几个方面做了很大改进，如：易用性、框架性能、扩展性、可维护性、开发体验等</li><li>易用性方面主要是API简化，比如v-model在Vue3中变成Vue2中v-model和sync修饰符的结合体，用户不用区分两者不同，也不用选择困难，类似的简化还有用于渲染函数内部生成VNode的h(type, props, children)，其中props不用考虑区分属性、特性、事件等，框架替我们判断，易用性大增</li><li>开发体验方面，新组件teleport传送门，fragments，suspense等都会简化特定场景的代码编写，SFC composition API语法糖更是极大提升我们开发体验</li><li>扩展性方面提升，如独立的reactivity模块，custom renderer API等</li><li>可维护性方面主要是Composition API，更容易编写高复用性的业务逻辑，还有对TS支持的提升</li><li>性能方面的改进也很显著，例如编译器优化，基于proxy的响应式系统</li></ol><h3 id="可能的追问-8" tabindex="-1"><a class="header-anchor" href="#可能的追问-8" aria-hidden="true">#</a> 可能的追问</h3><ol><li>vue3做了哪些编译优化？</li><li>proxy和defineProperty有什么不同？</li></ol><h2 id="_25-vue优化方面有哪些" tabindex="-1"><a class="header-anchor" href="#_25-vue优化方面有哪些" aria-hidden="true">#</a> 25. Vue优化方面有哪些？</h2><h3 id="回答范例-23" tabindex="-1"><a class="header-anchor" href="#回答范例-23" aria-hidden="true">#</a> 回答范例</h3><ol><li>这里我主要从Vue代码编写层面说一些优化手段，例如：代码分割，服务端渲染，组件缓存，长列表优化等</li><li>最常见的路由懒加载：有效拆分APP尺寸，访问时才异步加载</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">createRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">routes</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token comment">// 借助webpack的import()实现异步组件</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;/foo&#39;</span><span class="token punctuation">,</span> <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;./Foo.vue&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>keep-alive缓存页面：避免重复创建组件实例，且能保留缓存组件状态</li></ol><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span> <span class="token attr-name">v-slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{ Component }<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>keep-alive</span><span class="token punctuation">&gt;</span></span>
  	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span> <span class="token attr-name">:is</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Component<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>component</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>keep-alive</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>v-show复用组件：避免重复创建组件</li><li>v-for遍历避免同时使用v-if</li><li>v-once和v-memo：不再变化的数据使用v-once</li></ol><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token comment">&lt;!-- single element --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-once</span><span class="token punctuation">&gt;</span></span>This will never change: {{msg}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!-- the element have children --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-once</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>comment<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>{{msg}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!-- component --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-component</span> <span class="token attr-name">v-once</span> <span class="token attr-name">:comment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>msg<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-component</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!-- \`v-for\` directive --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>i in list<span class="token punctuation">&quot;</span></span> <span class="token attr-name">v-once</span><span class="token punctuation">&gt;</span></span>{{i}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>按条件跳过更新时使用v-memo：下面这个列表只会更新选中状态变化项</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item in list<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item.id<span class="token punctuation">&quot;</span></span> <span class="token attr-name">v-memo</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>[item.id === selected]<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>ID: {{ item.id }} - selected: {{ item.id === selected }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>...more child nodes<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="7"><li>长列表性能优化：如果所大数据长列表，可采用虚拟滚动，只渲染少部分区域的内容</li></ol><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>recycle-scroller</span>
  <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>items<span class="token punctuation">&quot;</span></span>
  <span class="token attr-name">:items</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>items<span class="token punctuation">&quot;</span></span>
  <span class="token attr-name">:item-size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>24<span class="token punctuation">&quot;</span></span>
<span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">v-slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{ item }<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>FetchItemView</span>
      <span class="token attr-name">:item</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item<span class="token punctuation">&quot;</span></span>
      <span class="token attr-name">@vote</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>voteItem(item)<span class="token punctuation">&quot;</span></span>
    <span class="token punctuation">/&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>recycle-scroller</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,21),Qn=n("p",null,"一些开源库：",-1),Yn={href:"https://github.com/Akryum/vue-virtual-scroller",target:"_blank",rel:"noopener noreferrer"},Zn={href:"https://github.com/rocwang/vue-virtual-scroll-grid",target:"_blank",rel:"noopener noreferrer"},na=t(`<ol start="8"><li>事件的销毁：Vue组件销毁时，会自动解绑它的全部指令及事件监听器，但是仅限于组件本身的事件</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>timer <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>refresh<span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">beforeUnmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">clearInterval</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>timer<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="9"><li>图片懒加载 对于图片过多的页面，为了加速页面加载速度，所以很多时候我们需要将页面内未出现在可视区域内的图片先不做加载， 等到滚动到可视区域后再去加载。</li></ol><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">v-lazy</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/static/img/1.png<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,4),aa={href:"https://github.com/hilongjw/vue-lazyload",target:"_blank",rel:"noopener noreferrer"},sa=t(`<ol start="10"><li>第三方插件按需引入: 像element-plus这样的第三方组件库可以按需引入避免体积太大。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Button<span class="token punctuation">,</span> Select <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;element-plus&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Button<span class="token punctuation">)</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Select<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="11"><li>子组件分割策略：较重的状态组件适合拆分</li></ol><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ChildComp</span><span class="token punctuation">/&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">ChildComp</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token function">heavy</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* 耗时任务 */</span> <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token function">render</span> <span class="token punctuation">(</span><span class="token parameter">h</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">heavy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),ea={href:"https://cn.vuejs.org/guide/best-practices/performance.html#reduce-reactivity-overhead-for-large-immutable-structures",target:"_blank",rel:"noopener noreferrer"},ta={start:"12"},pa={href:"https://cn.vuejs.org/guide/scaling-up/ssr.html",target:"_blank",rel:"noopener noreferrer"},oa=t('<h2 id="_26-vue2组件为什么只能有一个根节点" tabindex="-1"><a class="header-anchor" href="#_26-vue2组件为什么只能有一个根节点" aria-hidden="true">#</a> 26. Vue2组件为什么只能有一个根节点？</h2><p>这题现在有些落伍了，vue3已经不用一个根了。</p><h3 id="思路-15" tabindex="-1"><a class="header-anchor" href="#思路-15" aria-hidden="true">#</a> 思路</h3><ol><li>给自己一个结论</li><li>解释为什么会这样</li><li>vue3解决方法原理</li></ol><h3 id="回答范例-24" tabindex="-1"><a class="header-anchor" href="#回答范例-24" aria-hidden="true">#</a> 回答范例</h3><ol><li>vue2组件确实只能有一个根，但是vue3已经可以有多个根了</li><li>之所以这样所因为vdom是一棵单根树形结构，patch方法在遍历的时候从根节点开始遍历，它要求只有一个根节点，组件也会转换为一个vdom，自然需要满足这个要求</li><li>vue3之所以可以写多个根节点，是因为引入了fragment的概念，这是一个抽象的节点，如果发现组件是多根的，就创建一个fragment节点，把多根节点作为它的children,将来patch的时候，如果发现所一个fragment节点，则直接遍历children创建或更新</li></ol><h3 id="知其所以然-15" tabindex="-1"><a class="header-anchor" href="#知其所以然-15" aria-hidden="true">#</a> 知其所以然</h3>',7),la={href:"https://github1s.com/vuejs/core/blob/HEAD/packages/runtime-core/src/renderer.ts#L354-L355",target:"_blank",rel:"noopener noreferrer"},ia=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 直接获取type等，没有考虑数组的可能性</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> type<span class="token punctuation">,</span> ref<span class="token punctuation">,</span> shapeFlag <span class="token punctuation">}</span> <span class="token operator">=</span> n2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,1),ca={href:"https://github1s.com/vuejs/core/blob/HEAD/packages/runtime-core/src/renderer.ts#L1091-L1092",target:"_blank",rel:"noopener noreferrer"},ra=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// a fragment can only have array children</span>
<span class="token comment">// since they are either generated by the compiler, or implicitly created</span>
<span class="token comment">// from arrays.</span>
<span class="token function">mountChildren</span><span class="token punctuation">(</span>n2<span class="token punctuation">.</span>children <span class="token keyword">as</span> VNodeArrayChildren<span class="token punctuation">,</span> container<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_27-使用过vuex的module吗" tabindex="-1"><a class="header-anchor" href="#_27-使用过vuex的module吗" aria-hidden="true">#</a> 27.使用过vuex的module吗？</h2><h3 id="体验" tabindex="-1"><a class="header-anchor" href="#体验" aria-hidden="true">#</a> 体验</h3>`,3),ua={href:"https://vuex.vuejs.org/zh/guide/modules.html",target:"_blank",rel:"noopener noreferrer"},da=t(`<h3 id="思路-16" tabindex="-1"><a class="header-anchor" href="#思路-16" aria-hidden="true">#</a> 思路</h3><ol><li>概念和必要性</li><li>怎么拆</li><li>使用细节</li><li>优缺点</li></ol><h3 id="回答范例-25" tabindex="-1"><a class="header-anchor" href="#回答范例-25" aria-hidden="true">#</a> 回答范例</h3><ol><li>用过module，项目规模变大之后，单独一个store对象会过于庞大臃肿，通过模块方式可以拆分开来便于维护</li><li>可以按之前规则单独编写子模块代码，然后在主文件中通过modules选项组织起来：createStore({modules:{...}})</li><li>不过使用时要注意访问子模块状态时需要加上注册时模块名：store.state.a.xxx，但同时getters、mutations和actions又在全局空间中，使用方式和之前一样。如果要做到完全拆分，需要在子模块加上namespace选项，此时再访问它们就要加上命名空间前缀。</li><li>很显然，模块的方式可以拆分代码，但是缺点也很明显，就是使用起来比较繁琐复杂，容易出错。而且类型系统支持很差，不能给我们带来帮助。pinia显然在这方面有了很大改进，是时候切换过去了。</li></ol><h3 id="可能的追问-9" tabindex="-1"><a class="header-anchor" href="#可能的追问-9" aria-hidden="true">#</a> 可能的追问</h3><ol><li>用过pinia吗？都做了哪些改善？ Pinia API 与 Vuex ≤4 有很大不同，即：</li></ol><ul><li>mutations 不再存在。他们经常被认为是 非常 冗长。他们最初带来了 devtools 集成，但这不再是问题。</li><li>无需创建自定义复杂包装器来支持 TypeScript，所有内容都是类型化的，并且 API 的设计方式尽可能利用 TS 类型推断。</li><li>不再需要注入、导入函数、调用函数、享受自动完成功能！</li><li>无需动态添加 Store，默认情况下它们都是动态的，您甚至都不会注意到。请注意，您仍然可以随时手动使用 Store 进行注册，但因为它是自动的，您无需担心。</li><li>不再有 modules 的嵌套结构。您仍然可以通过在另一个 Store 中导入和 使用 来隐式嵌套 Store，但 Pinia 通过设计提供平面结构，同时仍然支持 Store 之间的交叉组合方式。 您甚至可以拥有 Store 的循环依赖关系。</li><li>没有 命名空间模块。鉴于 Store 的扁平架构，“命名空间” Store 是其定义方式所固有的，您可以说所有 Store 都是命名空间的。</li></ul><h2 id="_28-为什么路由需要懒加载" tabindex="-1"><a class="header-anchor" href="#_28-为什么路由需要懒加载" aria-hidden="true">#</a> 28.为什么路由需要懒加载？</h2><h3 id="分析-5" tabindex="-1"><a class="header-anchor" href="#分析-5" aria-hidden="true">#</a> 分析</h3><p>当打包应用时，JavaScript 包会变得非常大，影响页面加载。如果我们能把不同路由对应的组件分割成不同的代码块，然后当路由被访问时才加载对应组件，这样就会更加高效。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 将</span>
<span class="token comment">// import UserDetails from &#39;./views/UserDetails&#39;</span>
<span class="token comment">// 替换为</span>
<span class="token keyword">const</span> <span class="token function-variable function">UserDetails</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;./views/UserDetails&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">createRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token literal-property property">routes</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;/users/:id&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> UserDetails <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="思路-17" tabindex="-1"><a class="header-anchor" href="#思路-17" aria-hidden="true">#</a> 思路</h3><ol><li>必要性</li><li>何时用</li><li>怎么用</li><li>使用细节</li></ol><h3 id="回答范例-26" tabindex="-1"><a class="header-anchor" href="#回答范例-26" aria-hidden="true">#</a> 回答范例</h3>`,14),ka=n("li",null,"当打包构建应用时，JavaScript 包会变得非常大，影响页面加载。利用路由懒加载我们能把不同路由对应的组件分割成不同的代码块，然后当路由被访问的时候才加载对应组件，这样会更加高效，是一种优化手段。",-1),va=n("li",null,"一般来说，对所有的路由都使用动态导入是个好主意。",-1),ha=n("li",null,[a("给component选项配置一个返回 Promise 组件的函数就可以定义懒加载路由。例如："),n("code",null,"{ path: '/users/:id', component: () => import('./views/UserDetails') }")],-1),ma={href:"https://router.vuejs.org/zh/guide/advanced/lazy-loading.html#%E4%BD%BF%E7%94%A8-vite",target:"_blank",rel:"noopener noreferrer"},ba=n("li",null,"路由中不能使用异步组件",-1),ga=n("h3",{id:"知其所以然-16",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#知其所以然-16","aria-hidden":"true"},"#"),a(" 知其所以然")],-1),fa={href:"https://github1s.com/vuejs/router/blob/HEAD/src/navigationGuards.ts#L292-L293",target:"_blank",rel:"noopener noreferrer"},ya=n("h2",{id:"_29-ref和reactive有何差异",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_29-ref和reactive有何差异","aria-hidden":"true"},"#"),a(" 29.ref和reactive有何差异？")],-1),_a=n("h3",{id:"体验-1",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#体验-1","aria-hidden":"true"},"#"),a(" 体验")],-1),xa={href:"https://vuejs.org/api/reactivity-core.html#ref",target:"_blank",rel:"noopener noreferrer"},wa=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token comment">// 0</span>

count<span class="token punctuation">.</span>value<span class="token operator">++</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token comment">// 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),ja={href:"https://vuejs.org/api/reactivity-core.html#reactive",target:"_blank",rel:"noopener noreferrer"},qa=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
obj<span class="token punctuation">.</span>count<span class="token operator">++</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="思路-18" tabindex="-1"><a class="header-anchor" href="#思路-18" aria-hidden="true">#</a> 思路</h3><ol><li>两者概念</li><li>两个使用场景</li><li>两者异同</li><li>使用细节</li><li>原理</li></ol><h3 id="回答范例-27" tabindex="-1"><a class="header-anchor" href="#回答范例-27" aria-hidden="true">#</a> 回答范例</h3><ol><li>ref接收内部值，返回响应式Ref对象，reactive返回响应式代理对象</li><li>从定义上看ref通常用于处理单值的响应式，reactive用于处理对象类型的数据响应式</li><li>两者均是用来构造响应式数据，但是ref主要解决原始值的响应式问题</li><li>ref返回的响应式数据在js中使用需要加上.value才能访问其值，在视图中使用会自动脱ref,不需要.value。ref可以接收对象或数组等非原始值，但内部依然是reactive实现响应式；reactive内部如果接收Ref对象会自动脱ref;使用展开运算符(...)展开reactive返回的响应式对象会使其失去响应性，可以结合toRefs()将值转换为Ref对象之后再展开</li><li>reactive内部使用Proxy代理传入对象并拦截该对象各种操作(trap)，从而实现响应式。ref内部封装了一个RefImpl类，并设置get value/set value，拦截用户对值的访问，从而实现响应式。</li></ol><h3 id="知其所以然-17" tabindex="-1"><a class="header-anchor" href="#知其所以然-17" aria-hidden="true">#</a> 知其所以然</h3>`,6),Aa={href:"https://github1s.com/vuejs/core/blob/HEAD/packages/reactivity/src/ref.ts#L73-L74",target:"_blank",rel:"noopener noreferrer"},Sa={href:"https://github1s.com/vuejs/core/blob/HEAD/packages/reactivity/src/reactive.ts#L90-L91",target:"_blank",rel:"noopener noreferrer"},Ea=t(`<h2 id="_30-watch和watcheffect异同" tabindex="-1"><a class="header-anchor" href="#_30-watch和watcheffect异同" aria-hidden="true">#</a> 30.watch和watchEffect异同？</h2><h3 id="体验-2" tabindex="-1"><a class="header-anchor" href="#体验-2" aria-hidden="true">#</a> 体验</h3><p>watchEffect立即运行一个函数，然后被动地追踪它的依赖，当这些依赖改变时重新执行该函数。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>

<span class="token function">watchEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// -&gt; logs 0</span>

count<span class="token punctuation">.</span>value<span class="token operator">++</span>
<span class="token comment">// -&gt; logs 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>watch侦测一个或多个响应式数据源并在数据源变化时调用一个回调函数。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token function">watch</span><span class="token punctuation">(</span>
  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> state<span class="token punctuation">.</span>count<span class="token punctuation">,</span>
  <span class="token punctuation">(</span><span class="token parameter">count<span class="token punctuation">,</span> prevCount</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">/* ... */</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="思路-19" tabindex="-1"><a class="header-anchor" href="#思路-19" aria-hidden="true">#</a> 思路</h3><ol><li>给出两个定义</li><li>给出场景上的不同</li><li>给出使用方式和细节</li><li>原理阐述</li></ol><h3 id="回答范例-28" tabindex="-1"><a class="header-anchor" href="#回答范例-28" aria-hidden="true">#</a> 回答范例</h3><ol><li>watchEffect立即执行一个函数，然后被动地追踪它的依赖，当这些依赖改变时重新执行该函数。watch侦测一个或多个响应式数据源并在数据源变化时调用一个回调函数</li><li>watchEffect是一种特殊的watch，传入的函数既是依赖收集的数据源也是回调函数。如果我们不关心响应式数据变化前后的值，只想拿这些数据做些事情，那么watchEffect就是我们需要的。watch更底层，可以接收多种数据源，包括用于依赖收集的getter函数，因此它完全可以实现watchEffect的功能，同时由于可以指定getter函数，依赖可以控制的更精确，还能获取数据变化前后的值，因此如果需要这些，我没会使用watch</li><li>watchEffect在使用时，传入的函数会立即执行一次，watch默认情况下并不会执行回调函数，除非我们手动设置immediate选项</li><li>从实现上来说，watchEffect(fn)相当于watch(fn, fn, {immediate:true})</li></ol><h3 id="知其所以然-18" tabindex="-1"><a class="header-anchor" href="#知其所以然-18" aria-hidden="true">#</a> 知其所以然</h3>`,11),Da={href:"https://github1s.com/vuejs/core/blob/HEAD/packages/runtime-core/src/apiWatch.ts#L80-L81",target:"_blank",rel:"noopener noreferrer"},Va=t(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">watchEffect</span><span class="token punctuation">(</span>
  effect<span class="token operator">:</span> WatchEffect<span class="token punctuation">,</span>
  options<span class="token operator">?</span><span class="token operator">:</span> WatchOptionsBase
<span class="token punctuation">)</span><span class="token operator">:</span> WatchStopHandle <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">doWatch</span><span class="token punctuation">(</span>effect<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> options<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Ca={href:"https://github1s.com/vuejs/core/blob/HEAD/packages/runtime-core/src/apiWatch.ts#L158-L159",target:"_blank",rel:"noopener noreferrer"},La=t(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">watch</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> <span class="token builtin">any</span><span class="token punctuation">,</span> Immediate <span class="token keyword">extends</span> Readonly<span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>
  source<span class="token operator">:</span> <span class="token constant">T</span> <span class="token operator">|</span> WatchSource<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
  cb<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span>
  options<span class="token operator">?</span><span class="token operator">:</span> WatchOptions<span class="token operator">&lt;</span>Immediate<span class="token operator">&gt;</span>
<span class="token punctuation">)</span><span class="token operator">:</span> WatchStopHandle <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">doWatch</span><span class="token punctuation">(</span>source <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">,</span> cb<span class="token punctuation">,</span> options<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_31-spa和ssr异同" tabindex="-1"><a class="header-anchor" href="#_31-spa和ssr异同" aria-hidden="true">#</a> 31.SPA和SSR异同？</h2><p>我们现在编写的Vue、React和Angular应用大多数情况下都会在一个页面中，点击链接跳转页面通常是内容切换而非页面跳转，由于良好的用户体验逐渐成为主流的开发模式。但同时也会有首屏加载时间长，SEO不友好的问题，因此有了SSR，这也是为什么面试中会问到两者的区别。</p><h3 id="思路-20" tabindex="-1"><a class="header-anchor" href="#思路-20" aria-hidden="true">#</a> 思路</h3><ol><li>两者概念</li><li>两者优缺点</li><li>使用场景差异</li><li>其他选择</li></ol><h3 id="回答范例-29" tabindex="-1"><a class="header-anchor" href="#回答范例-29" aria-hidden="true">#</a> 回答范例</h3><ol><li>SPA（Single Page Application）即单页面应用。一般也称为 客户端渲染（Client Side Render）， 简称 CSR。SSR（Server Side Render）即 服务端渲染。一般也称为 多页面应用（Mulpile Page Application），简称 MPA。</li><li>SPA应用只会首次请求html文件，后续只需要请求JSON数据即可，因此用户体验更好，节约流量，服务端压力也较小。但是首屏加载的时间会变长，而且SEO不友好。为了解决以上缺点，就有了SSR方案，由于HTML内容在服务器一次性生成出来，首屏加载快，搜索引擎也可以很方便的抓取页面信息。但同时SSR方案也会有性能，开发受限等问题。</li><li>在选择上，如果我们的应用存在首屏加载优化需求，SEO需求时，就可以考虑SSR。</li><li>但并不是只有这一种替代方案，比如对一些不常变化的静态网站，SSR反而浪费资源，我们可以考虑预渲染（prerender）方案。另外nuxt.js/next.js中给我们提供了SSG（Static Site Generate）静态网站生成方案也是很好的静态站点解决方案，结合一些CI手段，可以起到很好的优化效果，且能节约服务器资源。</li></ol><h3 id="知其所以然-19" tabindex="-1"><a class="header-anchor" href="#知其所以然-19" aria-hidden="true">#</a> 知其所以然</h3><ol><li>内容生成上的区别</li></ol><p>SSR <img src="`+v+'" alt=""> SPA <img src="'+h+'" alt=""></p><ol start="2"><li>部署上的区别 <img src="'+m+'" alt=""></li></ol><h2 id="_32-vue-loader是什么-它有什么作用" tabindex="-1"><a class="header-anchor" href="#_32-vue-loader是什么-它有什么作用" aria-hidden="true">#</a> 32.vue-loader是什么？它有什么作用</h2><h3 id="体验-3" tabindex="-1"><a class="header-anchor" href="#体验-3" aria-hidden="true">#</a> 体验</h3><p>使用官方提供的SFC playground可以很好的体验vue-loader。</p><p>有了vue-loader加持，我们才可以以SFC的方式快速编写代码。</p>',15),Pa={href:"https://play.vuejs.org/#eNp9kUFLwzAUx79KfJcqzA3ZbXQDlYF6UFHBSy6je+sy0yQkL7NQ+t19SVn1ILv1/X//l/7SdnDr3PQYERZQhsorRyIgRbeSRjXOehKd8LgTvdh524iCq4U00lTWBBJNqMUy8cviAbW24tN6vb0orqQpZ8NxfBAPhI3TG0KehCj3N6uuy8t9X854yqkyLpI4Xjd2i3opgbkERuVs3IYJUOBX71Q9PQRr2LpLuxIq2zil0b84UqwmYSEySWzDZt9POSMfcXLKqz1WX//kh9CmTMKrx4D+iBJGRhtfIw14/f6MLT+PkM2j5vYZ+IbB6pgch9pdNFvW/tPLto/52ytTf4R1S2jC6VJJNDX73JfA/+P+zNV/defTed6Tpof+B7x8phs=",target:"_blank",rel:"noopener noreferrer"},Ra=t(`<h3 id="思路-21" tabindex="-1"><a class="header-anchor" href="#思路-21" aria-hidden="true">#</a> 思路</h3><ol><li>是什么</li><li>做什么用的</li><li>何时生效</li><li>如何工作</li></ol><h3 id="回答范例-30" tabindex="-1"><a class="header-anchor" href="#回答范例-30" aria-hidden="true">#</a> 回答范例</h3><ol><li>vue-loader是用于处理单文件组件(SFC,Single-File Component)的webpack loader</li><li>因为用了vue-loader，我们就可以在项目中编写SFC格式的Vue组件，我们可以把代码分割为<code>&lt;script&gt;</code>和<code>&lt;style&gt;</code>，代码会异常清晰。结合其他loader我们还可以用Pug编写，用sass、less编写<code>&lt;style&gt;</code>，用TS编写<code>&lt;script&gt;</code></li><li>webpack打包时，会以loader的方式调用vue-loader</li><li>vue-loader被执行时，它会对SFC中的每个语言块使用单独的loader链处理，最后将这些单独的块装配成最终的组件模板</li></ol><h3 id="知其所以然-20" tabindex="-1"><a class="header-anchor" href="#知其所以然-20" aria-hidden="true">#</a> 知其所以然</h3><ol><li>vue-loader会调用@vue/compiler-sfc模块解析SFC源码为一个描述符（Descriptor），然后为每个语言块生成import代码，返回的代码类似下面：</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// source.vue被vue-loader处理之后返回的代码</span>

<span class="token comment">// import the &lt;template&gt; block</span>
<span class="token keyword">import</span> render <span class="token keyword">from</span> <span class="token string">&#39;source.vue?vue&amp;type=template&#39;</span>
<span class="token comment">// import the &lt;script&gt; block</span>
<span class="token keyword">import</span> script <span class="token keyword">from</span> <span class="token string">&#39;source.vue?vue&amp;type=script&#39;</span>
<span class="token keyword">export</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token string">&#39;source.vue?vue&amp;type=script&#39;</span>
<span class="token comment">// import &lt;style&gt; blocks</span>
<span class="token keyword">import</span> <span class="token string">&#39;source.vue?vue&amp;type=style&amp;index=1&#39;</span>

script<span class="token punctuation">.</span>render <span class="token operator">=</span> render
<span class="token keyword">export</span> <span class="token keyword">default</span> script
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>我们想要script块中的内容被作为js处理（当然如果是<code>&lt;script lang=&quot;ts&quot;&gt;</code>被作为ts处理），这样我们想要webpack把配置中跟.js匹配的规则都应用到形如<code>source.vue?vue&amp;type=script</code>的这个请求上。例如我们对所有*.js配置了<code>babel-loader</code>，这个规则将被克隆并应用到所在Vue SFC的<code>&lt;script&gt;</code>块上。内部的请求比如：</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> script <span class="token keyword">from</span> <span class="token string">&#39;source.vue?vue&amp;type=script&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>将被展开为：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> script <span class="token keyword">from</span> <span class="token string">&#39;babel-loader!vue-loader!source.vue?vue&amp;type=script&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>类似的，如果我们对.sass文件配置了style-loader + css-loader + sass-loader，下面的代码：</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>scss<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token style"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>vue-loader将会返回给我们下面请求：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token string">&#39;source.vue?vue&amp;type=style&amp;index=1&amp;scoped&amp;lang=scss&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后webpack会展开如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token string">&#39;style-loader!css-loader!sass-loader!vue-loader!source.vue?vue&amp;type=style&amp;index=1&amp;scoped&amp;lang=scss&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol><li>当处理展开请求时，vue-loader将被再次调用。这次，loader将会关注那些有查询串的请求，且仅针对特定块，它会选中特定块内部的内容并传递给后面匹配的loader。</li><li>对于<code>&lt;script&gt;</code>块，处理到这就可以了，但是<code>&lt;template&gt;</code> 和 <code>&lt;style&gt;</code>还有一些额外任务要做，比如：</li></ol><ul><li>需要用Vue 模板编译器编译template，从而得到render函数</li><li>需要对<code>&lt;style scoped&gt;</code>中的CSS做后处理（post-process），该操作在css-loader之后但在style-loader之前</li></ul><p>实现上这些附加的loader需要被注入到已经展开的loader链上，最终的请求会像下面这样：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// &lt;template lang=&quot;pug&quot;&gt;</span>
<span class="token keyword">import</span> <span class="token string">&#39;vue-loader/template-loader!pug-loader!source.vue?vue&amp;type=template&#39;</span>

<span class="token comment">// &lt;style scoped lang=&quot;scss&quot;&gt;</span>
<span class="token keyword">import</span> <span class="token string">&#39;style-loader!vue-loader/style-post-loader!css-loader!sass-loader!vue-loader!source.vue?vue&amp;type=style&amp;index=1&amp;scoped&amp;lang=scss&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_33-你写过自定义指令吗-使用场景有哪些" tabindex="-1"><a class="header-anchor" href="#_33-你写过自定义指令吗-使用场景有哪些" aria-hidden="true">#</a> 33.你写过自定义指令吗？使用场景有哪些？</h2><h3 id="思路-22" tabindex="-1"><a class="header-anchor" href="#思路-22" aria-hidden="true">#</a> 思路</h3><ol><li>定义</li><li>何时用</li><li>怎么用</li><li>常用指令</li><li>vue3变化</li></ol><h3 id="回答范例-31" tabindex="-1"><a class="header-anchor" href="#回答范例-31" aria-hidden="true">#</a> 回答范例</h3><ol><li>Vue有一组默认指令，比如v-model或v-for，同时Vue也运行用户注册自定义指令来扩展Vue能力</li><li>自定义指令主要完成一些可复用低层级DOM操作</li><li>使用自定义指令分为定义、注册和使用三步： <ol><li>定义自定义指令有两种方式，对象和函数形式，前者类似组件定义，有各种生命周期；后者只会在mounted和updated时执行</li><li>注册自定义指令类似组件，可以使用app.directive()全局注册，使用{directive: {xxx}}局部注册</li><li>使用时在注册名称前加上v-即可，比如v-focus</li></ol></li><li>我在项目中常用到的一些自定义指令，例如： <ol><li>复制粘贴：v-copy</li><li>长按：v-longpress</li><li>防抖：v-debounce</li><li>图片懒加载：v-lazy</li><li>页面水印：v-waterMarker</li><li>拖拽指令：v-draggable</li></ol></li><li>vue3中指令发生了较大的变化，主要是钩子的名称保持与组件一致，这样开发人员更容易记忆，不易犯错。另外在v3.2之后，可以在setup中以一个小写v开头方便定义自定义指令，更方便了。</li></ol><h3 id="知其所以然-21" tabindex="-1"><a class="header-anchor" href="#知其所以然-21" aria-hidden="true">#</a> 知其所以然</h3>`,27),Ia={href:"https://play.vuejs.org/#eNp9UstKAzEU/ZVrNm1BO4g7GQUVRV2oqOAmmzK9raOZJORRC8OsxJ3oRv0Gl4JQKfg7rd35C97J2NaFFGYx55HknJvkbEvrZs8jW2exTUyqHVh0Xm9ymWZaGQc5GOxAAR2jMqiRtcYll4mS1kFmu7BR6vXaPgqh4EIZ0V6qNeaW3p5KvCVXziVAprx02K6jaFQEQBTB5OFj9PiSSu3d9+f9aDiYvN1+Pb2O7gadcnG9MX4Zjt+fKz+K5i9b4oJL+uKoyk6pCTjMtGg5JAQQX65u5nlIWhRxRCiw4TDorWSqjWKDM9I5Ixy2JksczXZhy8xZKtNJu80rqySNKkTnLFGZTgWaY+1SKsvZ+rQUZy0ax81h4JzxuDzlk0tMrv/hr2y/5Dg7MWjR9JCzmeZapouuknfPjrBP/zORGnhB7gXiKVolfJmxsm172abYf3wh7UG48FR2z+1u36G001Jl0DDs4OeMHsHOgurzuGvNteklseIH2rnXfg==",target:"_blank",rel:"noopener noreferrer"},Ta=t(`<h2 id="_34-attrs和-listeners是做什么的" tabindex="-1"><a class="header-anchor" href="#_34-attrs和-listeners是做什么的" aria-hidden="true">#</a> 34.$attrs和$listeners是做什么的？</h2><h3 id="思路-23" tabindex="-1"><a class="header-anchor" href="#思路-23" aria-hidden="true">#</a> 思路</h3><ol><li>这两个api的作用</li><li>使用场景分析</li><li>使用方式和细节</li><li>vue3变化</li></ol><h3 id="回答范例-32" tabindex="-1"><a class="header-anchor" href="#回答范例-32" aria-hidden="true">#</a> 回答范例</h3><ol><li>我们可能会有一些属性和事件没有在props中定义，这类称为非属性特性，结合v-bind指令可以直接透传给内部的子组件</li><li>这类“透传属性”常常用于包装高阶组件时往内部传递属性，常用于爷孙组件之间传参。比如我在扩展A组件时创建了组件B,然后在C组件中使用B,此时传递给C的属性中只有props里面声明的属性是给B使用的，其他都是A需要的，此时就可以利用v-bind=$attrs透传下去</li><li>最常见用法是结合v-bind做展开；$attrs本身不是响应式的，除非访问的属性本身是响应式对象</li><li>vue2中使用$listeners获取事件，vue3中已移除，均合并到$attrs中，使用起来更简单</li></ol><h3 id="知其所以然-22" tabindex="-1"><a class="header-anchor" href="#知其所以然-22" aria-hidden="true">#</a> 知其所以然</h3><p>查看透传属性foo和普通属性bar，发现vnode结构完全相同，这说明vue3中将分辨两者工作由框架完成而非用户指定：</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>{{ msg }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>comp</span> <span class="token attr-name">foo</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>foo<span class="token punctuation">&quot;</span></span> <span class="token attr-name">bar</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>bar<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
    {{$attrs.foo}} {{bar}}
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token function">defineProps</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">bar</span><span class="token operator">:</span> String
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">_createVNode</span><span class="token punctuation">(</span>Comp<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token string">&quot;foo&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">bar</span><span class="token operator">:</span> <span class="token string">&quot;bar&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10),$a={href:"https://play.vuejs.org/#eNp9UlFLwzAQ/isxCFUYLbK30Q1UBuqDDif4kpfaXrvONgnJdQ5K/ruX1NUi6kvI3ffdd99d0vNrreNDB3zBU5ubWiOzgJ1eCVm3WhlkPTNQMsdKo1oWETUaoVvV6q98nPjAKxGcK2mRtbZiS198Ed1B0yj2qkxTnEWXQqbJ0Iu6UIDQ6iZDoIixdHe16vtQ7FyaUBSyeWil1FJwOgVnb5mhO510T4iTJqMMn/GTGT/WRF5gWtSHoMhY359niMbGJOgchSTmXOiWDKyJJgU/1lNAWUvYGKXtRe+rqHzBtmhqWQnpplOSIbS0lLKu4r1VklyFCsH9WHUD5kljTUsTfMEC4rGMdvbxEHJoOpid8vkO8vdf8nt79DnBNwYsmAMIPmKYmQpwgNfbRzjSfQRbVXQNsf8Bn8GqpvMeB9pNJwuyPeEFt/fhX9ACXuz6iCDtaShv1DNd4AtOT+Of6K/Rv+3O43moo41y9wkUxOX9",target:"_blank",rel:"noopener noreferrer"},Ha=t(`<h2 id="_35-v-once使用场景有哪些" tabindex="-1"><a class="header-anchor" href="#_35-v-once使用场景有哪些" aria-hidden="true">#</a> 35.v-once使用场景有哪些？</h2><h3 id="思路-24" tabindex="-1"><a class="header-anchor" href="#思路-24" aria-hidden="true">#</a> 思路</h3><ol><li>v-once是什么</li><li>什么时候使用</li><li>如何使用</li><li>扩展v-memo</li><li>探索原理</li></ol><h3 id="回答范例-33" tabindex="-1"><a class="header-anchor" href="#回答范例-33" aria-hidden="true">#</a> 回答范例</h3><ol><li>v-once是vue的内置指令，作用是仅渲染指定组件或元素一次，并跳过未来对其更新</li><li>如果我们有一些元素或组件在初始化渲染之后不再需要变化，这种情况下适合使用v-once，这样哪怕数据变化，vue也会跳过更新，是一种代码优化手段</li><li>我们只需要作用的组件或元素上加上v-once即可</li><li>vue3.2之后，又增加了v-memo指令，可以有条件缓存部分模板并控制它们的更新，可以说控制力更强了</li><li>编译器发现元素上面有v-once时，会将首次计算结果存入缓存对象，组件再次渲染时就会从缓存获取，从而避免再次计算</li></ol><h3 id="知其所以然-23" tabindex="-1"><a class="header-anchor" href="#知其所以然-23" aria-hidden="true">#</a> 知其所以然</h3><p>下面例子使用了v-once</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>

<span class="token keyword">const</span> msg <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">&#39;Hello World!&#39;</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">v-once</span><span class="token punctuation">&gt;</span></span>{{ msg }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>msg<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们发现v-once出现后，编译器会缓存作用元素或组件，从而避免以后更新时重新计算这一部分</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// ...</span>
<span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter">_ctx<span class="token punctuation">,</span> _cache</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">_openBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_createElementBlock</span><span class="token punctuation">(</span>_Fragment<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
    <span class="token comment">// 从缓存获取vnode</span>
    _cache<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">(</span>
      <span class="token function">_setBlockTracking</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      _cache<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">_createElementVNode</span><span class="token punctuation">(</span><span class="token string">&quot;h1&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
        <span class="token function">_createTextVNode</span><span class="token punctuation">(</span><span class="token function">_toDisplayString</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token comment">/* TEXT */</span><span class="token punctuation">)</span>
      <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function">_setBlockTracking</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      _cache<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
    <span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token comment">// ...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_36-什么是递归组件-使用场景有哪些" tabindex="-1"><a class="header-anchor" href="#_36-什么是递归组件-使用场景有哪些" aria-hidden="true">#</a> 36.什么是递归组件？使用场景有哪些？</h2><h3 id="分析-6" tabindex="-1"><a class="header-anchor" href="#分析-6" aria-hidden="true">#</a> 分析</h3><p>递归组件在tree、menu这类组件中会被用的</p><h3 id="体验-4" tabindex="-1"><a class="header-anchor" href="#体验-4" aria-hidden="true">#</a> 体验</h3><p>组件通过组件名称引用它自己，这种情况就是递归组件</p><blockquote><p>An SFC can implicitly refer to itself via its filename.</p></blockquote><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span> {{ model.name }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">v-show</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>isOpen<span class="token punctuation">&quot;</span></span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>isFolder<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
      <span class="token comment">&lt;!-- 注意这里：组件递归渲染了它自己 --&gt;</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TreeItem</span>
        <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>model in model.children<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">:model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>model<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>TreeItem</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;TreeItem&#39;</span><span class="token punctuation">,</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="思路-25" tabindex="-1"><a class="header-anchor" href="#思路-25" aria-hidden="true">#</a> 思路</h3><ol><li>下定义</li><li>使用场景</li><li>使用细节</li><li>原理阐述</li></ol><h3 id="回答范例-34" tabindex="-1"><a class="header-anchor" href="#回答范例-34" aria-hidden="true">#</a> 回答范例</h3><ol><li>如果某个组件通过组件名称引用它自己，这种情况就是递归组件</li><li>实际开发中类似Tree、Menu这类组件，它们的节点往往包含子节点，子节点结构和父节点往往是相同的。这类组件的数据往往也是树形结构，这种都是使用递归组件的典型场景</li><li>使用递归组件时，由于我们并未也不能在组件内部导入它自己，所以设置组件name属性，用来查找组件定义，如果使用SFC,则可以通过SFC文件名推断。组件内部通常也要有递归结束条件，比如model.children这样的判断</li><li>查看生成渲染函数可知，递归组件查找时会传递一个布尔值给resolveComponent，这样实际获取的组件就是当前组件本身</li></ol><h3 id="知其所以然-24" tabindex="-1"><a class="header-anchor" href="#知其所以然-24" aria-hidden="true">#</a> 知其所以然</h3><p>递归组件编译结果中，获取组件时会传递一个标识符 <code>_resolveComponent(&quot;Comp&quot;, true)</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> _component_Comp <span class="token operator">=</span> <span class="token function">_resolveComponent</span><span class="token punctuation">(</span><span class="token string">&quot;Comp&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>就是在传递<code>maybeSelfReference</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">resolveComponent</span><span class="token punctuation">(</span>
  <span class="token parameter"><span class="token literal-property property">name</span><span class="token operator">:</span> string<span class="token punctuation">,</span>
  maybeSelfReference<span class="token operator">?</span><span class="token operator">:</span> boolean</span>
<span class="token punctuation">)</span><span class="token operator">:</span> ConcreteComponent <span class="token operator">|</span> string <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">resolveAsset</span><span class="token punctuation">(</span><span class="token constant">COMPONENTS</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> maybeSelfReference<span class="token punctuation">)</span> <span class="token operator">||</span> name
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>resolveAsset中最终返回的是组件自身：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>res <span class="token operator">&amp;&amp;</span> maybeSelfReference<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// fallback to implicit self-reference</span>
    <span class="token keyword">return</span> Component
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,28),Oa={href:"https://github1s.com/vuejs/core/blob/HEAD/packages/runtime-core/src/helpers/resolveAssets.ts#L22-L23",target:"_blank",rel:"noopener noreferrer"},Ba={href:"https://play.vuejs.org/#eNp9U81u1DAQfpWRL2mlNlG3tyhdCVAPcKAIuGEOaTK7m8WxI9tZVooiceAJ+jBcKt4GhHgLxpOf3RXQkzPzff78zWenE8+aJt61KFKRucJWjQeHvm2WUld1Y6yHDiyuoIeVNTVERI1mqDB1M/bj5AUVQYngwmjnoXZruAmbz6LfXx5+fn/49fj1x+O36HwmmBIVUTqpAVR+jyqFSFPz8iq6CL1iU6nSok7hQygBulMW8Xom/o0soj4AH6WmNUuG0WgoKjzWjco9UgWQba6WXcde+z5LqOIuT5aywRspeJVimSWhT4wsmUXEhZgmDxmeipfVjj/IX8ciMdvs2VuWTHAWFGB3uTKWTqtIAyo9xBNPGUhx8BMYbCfsOxhejAYXpw6pOIzvcc9XV+IqbxXd7mBP5zVSeEFviB6gsaZx6USAwU4Kd/dbLPzQnMIPhxqN2h/z2clRDfQUdIn27Lzj8Vlg1AnL8T1RqN7RI1lV63jrjKZkWUeKoFoptHeNr+gRSTGfIEWulPn8invetjiaoz0bLD79o791+9CT4o1Fh3aHUsyYz+0a/QDfvnuNe/qeQYqiVcR+AnyLzqg2eBxoz1tdku0jHrt9yT9Spdfv3e3eo3bTUMEop8J8Keh5hcv53+gHu9fx9ZhmL/o/+vFGeg==",target:"_blank",rel:"noopener noreferrer"},Ma=t(`<h2 id="_37-什么是异步组件" tabindex="-1"><a class="header-anchor" href="#_37-什么是异步组件" aria-hidden="true">#</a> 37.什么是异步组件？</h2><h3 id="体验-5" tabindex="-1"><a class="header-anchor" href="#体验-5" aria-hidden="true">#</a> 体验</h3><p>大小应用中，我们需要分割应用为更小的块，并且再需要组件时再加载它们</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> defineAsyncComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token comment">// defineAsyncComponent定义异步组件</span>
<span class="token keyword">const</span> AsyncComp <span class="token operator">=</span> <span class="token function">defineAsyncComponent</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 加载函数返回Promise</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...可以从服务器加载组件</span>
    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token comment">/* loaded component */</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// 借助打包工具实现ES模块动态导入</span>
<span class="token keyword">const</span> AsyncComp <span class="token operator">=</span> <span class="token function">defineAsyncComponent</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
  <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;./components/MyComponent.vue&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="思路-26" tabindex="-1"><a class="header-anchor" href="#思路-26" aria-hidden="true">#</a> 思路</h3><ol><li>异步组件作用</li><li>什么时候使用异步组件</li><li>使用细节</li><li>和路由懒加载的不同</li></ol><h3 id="回答范例-35" tabindex="-1"><a class="header-anchor" href="#回答范例-35" aria-hidden="true">#</a> 回答范例</h3><ol><li>在大型应用中，我们需要分割应用为更小的块，并且在需要组件时再加载它们</li><li>我们不仅可以在路由切换时懒加载组件，还可以再页面组件中继续使用异步组件，从而实现更细的分割粒度</li><li>使用异步组件最简单的方式是直接给defineAsyncComponent指定一个loader函数，结合ES模块动态导入函数import可以快速实现。我们甚至可以指定loadingComponent和errorComponent选项从而给用户一个很好的加载反馈。另外Vue3中还可以结合suspense组件使用异步组件</li><li>异步组件容易和路由懒加载混淆，实际上不是一个东西。异步组件不能被用于定义懒加载路由上，处理它的是vue框架，处理路由组件加载的是vue-router。但是可以在懒加载的路由组件中使用异步组件</li></ol><h3 id="知其所以然-25" tabindex="-1"><a class="header-anchor" href="#知其所以然-25" aria-hidden="true">#</a> 知其所以然</h3><p>defineAsyncComponent定义了一个高阶组件，返回一个包装组件。包装组件根据加载器的状态决定渲染什么内容。</p>`,10),Fa={href:"https://github1s.com/vuejs/core/blob/HEAD/packages/runtime-core/src/apiAsyncComponent.ts#L43-L44",target:"_blank",rel:"noopener noreferrer"},Na=t(`<h2 id="_38-vue项目中如何处理错误" tabindex="-1"><a class="header-anchor" href="#_38-vue项目中如何处理错误" aria-hidden="true">#</a> 38.Vue项目中如何处理错误？</h2><h3 id="思路-27" tabindex="-1"><a class="header-anchor" href="#思路-27" aria-hidden="true">#</a> 思路</h3><ol><li>首先区分错误类型</li><li>根据错误不同类型做相应收集</li><li>收集的错误是如何上报服务器的</li></ol><h3 id="回答范例-36" tabindex="-1"><a class="header-anchor" href="#回答范例-36" aria-hidden="true">#</a> 回答范例</h3><ol><li>应用中的错误类型分为接口异常和代码逻辑异常</li><li>我们需要根据不同错误类型做相应处理：接口异常是我们请求后端接口过程中发生的异常，可能是请求失败，也可能是请求获得了服务器响应，但是返回的是错误状态。以Axios为例，这类异常我们可以通过封装Axios，在拦截器中统一处理整个应用中请求的错误。代码逻辑异常是我们编写的前端代码中存在逻辑上的错误造成的异常，vue应用中最常见的方式是使用全局错误处理函数app.config.errorHandler收集错误。</li><li>收集到错误之后，需要统一处理这些异常：分析错误，获取需要错误信息和数据。这里应该有效区分错误类型，如果是请求错误，需要上报接口信息，参数，状态码等；对于前端逻辑异常，获取错误名称和详情即可。另外还可以收集应用名称、环境、版本、用户信息，所在页面等。这些信息可以通过vuex存储的全局状态和路由信息获取。</li></ol><h3 id="实践" tabindex="-1"><a class="header-anchor" href="#实践" aria-hidden="true">#</a> 实践</h3><ul><li>axios拦截器中处理捕获异常：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 响应拦截器</span>
instance<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>
  <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> response<span class="token punctuation">.</span>data<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 存在response说明服务器有响应</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">.</span>response<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> response <span class="token operator">=</span> error<span class="token punctuation">.</span>response<span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>status <span class="token operator">&gt;=</span> <span class="token number">400</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">handleError</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token function">handleError</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>vue中全局捕获异常：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>

<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span>config<span class="token punctuation">.</span><span class="token function-variable function">errorHandler</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> instance<span class="token punctuation">,</span> info</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// report error to tracking services</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>处理接口请求错误：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">handleError</span><span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span> type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>type <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 接口错误，从config字段中获取请求信息</span>
    <span class="token keyword">let</span> <span class="token punctuation">{</span> url<span class="token punctuation">,</span> method<span class="token punctuation">,</span> params<span class="token punctuation">,</span> data <span class="token punctuation">}</span> <span class="token operator">=</span> error<span class="token punctuation">.</span>config
    <span class="token keyword">let</span> err_data <span class="token operator">=</span> <span class="token punctuation">{</span>
       url<span class="token punctuation">,</span> method<span class="token punctuation">,</span>
       <span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">query</span><span class="token operator">:</span> params<span class="token punctuation">,</span> <span class="token literal-property property">body</span><span class="token operator">:</span> data <span class="token punctuation">}</span><span class="token punctuation">,</span>
       <span class="token literal-property property">error</span><span class="token operator">:</span> error<span class="token punctuation">.</span>data<span class="token operator">?.</span>message <span class="token operator">||</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>处理前端逻辑错误：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">handleError</span><span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span> type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>type <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> errData <span class="token operator">=</span> <span class="token keyword">null</span>
    <span class="token comment">// 逻辑错误</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>error <span class="token keyword">instanceof</span> <span class="token class-name">Error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> message <span class="token punctuation">}</span> <span class="token operator">=</span> error
      errData <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">type</span><span class="token operator">:</span> name<span class="token punctuation">,</span>
        <span class="token literal-property property">error</span><span class="token operator">:</span> message
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      errData <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;other&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">error</span><span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">strigify</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_39-从0实现vuex" tabindex="-1"><a class="header-anchor" href="#_39-从0实现vuex" aria-hidden="true">#</a> 39.从0实现vuex?</h2><h3 id="思路-28" tabindex="-1"><a class="header-anchor" href="#思路-28" aria-hidden="true">#</a> 思路</h3><ol><li>vuex需求分析</li><li>如何实现这些需求</li></ol><h3 id="回答范例-37" tabindex="-1"><a class="header-anchor" href="#回答范例-37" aria-hidden="true">#</a> 回答范例</h3><ol><li>官方说vuex是一个状态管理模式的库，并确保这种状态以可预期的方式变更。可见要实现一个vuex: <ol><li>要实现一个store存储全局状态</li><li>要提供修改状态所需API: commit(type, payload), dispatch(type, payload)</li></ol></li><li>实现store时，可以定义Store类，构造函数接收选项options,设置属性state对外暴露状态，提供commit和dispatch修改属性state。这里需要设置state为响应式对象，同时将Store定义为一个vue插件</li><li>commit(type, payload)方法中可以获取用户传入的mutations并执行它，这样可以按用户提供的方法修改状态。dispatch(type, payload)类似，但需要注意它可能是异步的，需要返回一个Promise给用户以处理异步结果。</li></ol><h3 id="实践-1" tabindex="-1"><a class="header-anchor" href="#实践-1" aria-hidden="true">#</a> 实践</h3><p>Store的实现</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Store</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>state<span class="token punctuation">)</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>options <span class="token operator">=</span> options
    <span class="token punctuation">}</span>
    <span class="token function">commit</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> payload</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>mutations<span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">,</span> payload<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="知其所以然-26" tabindex="-1"><a class="header-anchor" href="#知其所以然-26" aria-hidden="true">#</a> 知其所以然</h3>`,23),Ua={href:"https://github1s.com/vuejs/vuex/blob/HEAD/src/store.js#L19-L20",target:"_blank",rel:"noopener noreferrer"},za=t(`<h2 id="_40-mutation和action有什么区别" tabindex="-1"><a class="header-anchor" href="#_40-mutation和action有什么区别" aria-hidden="true">#</a> 40.mutation和action有什么区别？</h2><h3 id="体验-6" tabindex="-1"><a class="header-anchor" href="#体验-6" aria-hidden="true">#</a> 体验</h3><p>看下面例子可知，Action 类似于 mutation，不同在于：</p><ul><li>Action 提交的是 mutation，而不是直接变更状态。</li><li>Action 可以包含任意异步操作。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">state</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">mutations</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">increment</span> <span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      state<span class="token punctuation">.</span>count<span class="token operator">++</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">actions</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">increment</span> <span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      context<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">&#39;increment&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="思路-29" tabindex="-1"><a class="header-anchor" href="#思路-29" aria-hidden="true">#</a> 思路</h3><ol><li>给出两者概念说明区别</li><li>举例说明应用场景</li><li>使用细节不同</li><li>简单阐述实现上差异</li></ol><h3 id="回答范例-38" tabindex="-1"><a class="header-anchor" href="#回答范例-38" aria-hidden="true">#</a> 回答范例</h3><ol><li>官方文档说：更改 Vuex 的 store 中的状态的唯一方法是提交 mutation，mutation 非常类似于事件：每个 mutation 都有一个<strong>字符串的类型 (type)<strong>和一个</strong>回调函数 (handler)</strong>。Action 类似于 mutation，不同在于：Action可以包含任意异步操作，但它不能修改状态， 需要提交mutation才能变更状态。</li><li>因此，开发时，包含异步操作或者复杂业务组合时使用action；需要直接修改状态则提交mutation。但由于dispatch和commit是两个API，容易引起混淆，实践中也会采用统一使用dispatch action的方式。</li><li>调用dispatch和commit两个API时几乎完全一样，但是定义两者时却不甚相同，mutation的回调函数接收参数是state对象。action则是与Store实例具有相同方法和属性的上下文context对象，因此一般会解构它为{commit, dispatch, state}，从而方便编码。另外dispatch会返回Promise实例便于处理内部异步结果。</li><li>实现上commit(type)方法相当于调用<code>options.mutations[type](state)</code>；dispatch(type)方法相当于调用<code>options.actions[type](store)</code>，这样就很容易理解两者使用上的不同了。</li></ol><h3 id="知其所以然-27" tabindex="-1"><a class="header-anchor" href="#知其所以然-27" aria-hidden="true">#</a> 知其所以然</h3><p>我们可以像下面这样简单实现commit和dispatch，从而辨别两者不同：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Store</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>state<span class="token punctuation">)</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>options <span class="token operator">=</span> options
    <span class="token punctuation">}</span>
    <span class="token function">commit</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> payload</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 传入上下文和参数1都是state对象</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>mutations<span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">,</span> payload<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> payload</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 传入上下文和参数1都是store本身</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>actions<span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_41-vue长列表优化思路" tabindex="-1"><a class="header-anchor" href="#_41-vue长列表优化思路" aria-hidden="true">#</a> 41.Vue长列表优化思路</h2><h3 id="思路-30" tabindex="-1"><a class="header-anchor" href="#思路-30" aria-hidden="true">#</a> 思路</h3><ol><li>描述大数据量带来的问题</li><li>分不同情况做不同处理</li><li>总结一下</li></ol><h3 id="回答范例-39" tabindex="-1"><a class="header-anchor" href="#回答范例-39" aria-hidden="true">#</a> 回答范例</h3><ol><li>在大型企业级项目中经常需要渲染大量数据，此时很容易发生卡顿的情况。比如大数据量的表格、树等</li><li>处理时需要根据情况做不同处理： <ol><li>可以采用分页的方式获取，避免渲染大量数据</li><li>虚拟滚动方案，只渲染视口范围内的数据</li><li>如果不需要更新，可以使用v-once方式只渲染一次</li><li>通过v-memo可以缓存结果，结合v-for使用，避免数据变化时不必要的VNode创建</li><li>可以采用懒加载方式，在用户需要的时候再加载数据，比如tree组件子树的懒加载</li></ol></li><li>总之，还是要看具体需求，首先从设计上避免大数据获取和渲染；实在需要这样做可以采用虚拟列表的方式优化渲染；最后优化更新，如果不需要更新可以v-once处理，需要更新可以v-memo进一步优化大数据更新性能。其他可以采用的是交互方式优化，无限滚动，懒加载等方案</li></ol><h2 id="_42-如何监听vuex状态变化" tabindex="-1"><a class="header-anchor" href="#_42-如何监听vuex状态变化" aria-hidden="true">#</a> 42.如何监听vuex状态变化</h2><h3 id="分析-7" tabindex="-1"><a class="header-anchor" href="#分析-7" aria-hidden="true">#</a> 分析</h3><p>vuex数据状态是响应式的，所以状态变视图跟着变，但是有时还需要指导数据状态变了从而做一些事情</p><p>既然状态都是响应式的，那自然可以watch，另外vuex也提供了订阅API:store.subscribe()</p><h3 id="思路-31" tabindex="-1"><a class="header-anchor" href="#思路-31" aria-hidden="true">#</a> 思路</h3><ol><li>总述知道的办法</li><li>分别阐述用法</li><li>选择和场景</li></ol><h3 id="回答范例-40" tabindex="-1"><a class="header-anchor" href="#回答范例-40" aria-hidden="true">#</a> 回答范例</h3><ol><li>我知道几种方法： <ol><li>可以通过watch选项或者watch方法监听状态</li><li>可以使用vuex提供的API：store.subscribe()</li></ol></li><li>watch选项方式，可以以字符串形式监听$store.state.xx;subscribe方式，可以调用store.subscribe(cb)，回调函数接收mutation对象和state对象，这样可以进一步判断mutation.type是否是期待的那个，从而进一步做后续处理</li><li>watch方式简单好用，且能获取变化前后的值，首选；subscribe方法会被所有commit行为触发，隐藏还需要判断mutation.type，用起来略繁琐，一般用于vuex插件中</li></ol><h3 id="实践-2" tabindex="-1"><a class="header-anchor" href="#实践-2" aria-hidden="true">#</a> 实践</h3><ul><li>watch方式</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">watch</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token string">&#39;$store.state.counter&#39;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;counter change!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>subscribe方式</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  store<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">mutation<span class="token punctuation">,</span> state</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>mutation<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;add&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;counter change in subscribe()!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_43-router-link和router-view是如何生效的" tabindex="-1"><a class="header-anchor" href="#_43-router-link和router-view是如何生效的" aria-hidden="true">#</a> 43.router-link和router-view是如何生效的？</h2><h3 id="思路-32" tabindex="-1"><a class="header-anchor" href="#思路-32" aria-hidden="true">#</a> 思路</h3><ol><li>两者作用</li><li>阐述整体流程</li><li>分析两个组件实现方式</li></ol><h3 id="回答范例-41" tabindex="-1"><a class="header-anchor" href="#回答范例-41" aria-hidden="true">#</a> 回答范例</h3><ol><li>vue-router中两个重要组件router-link和router-view，分别起到<strong>路由导航作用</strong>和<strong>组件内容渲染作用</strong></li><li>vue-router会监听popstate事件，点击router-link后之后页面不会刷新，而是拿出当前path去和routes中path匹配，获得匹配组件后，router-view会将匹配组件渲染出来</li><li>使用router-link默认生成一个a标签，点击后取消默认行为而是执行一个navigate方法，它会pushState以激活事件处理函数，重新匹配出一个路由injectedRoute；router-view的渲染函数依赖这个路由，它根据该路由获取要渲染的组件并重新渲染它</li><li>router-link组件内部根据custom属性判断如何渲染最终生成节点，内部提供导航方法navigate，用户点击之后实际调用的是该方法，此方法最终会修改响应式的路由变量，然后重新去routes匹配出数组结果，router-view则根据其所处深度deep在匹配数组结果中找到对应的路由并获取组件，最终将其渲染出来</li></ol><h3 id="知其所以然-28" tabindex="-1"><a class="header-anchor" href="#知其所以然-28" aria-hidden="true">#</a> 知其所以然</h3>`,36),Wa={href:"https://github1s.com/vuejs/router/blob/HEAD/src/RouterLink.ts#L184-L185",target:"_blank",rel:"noopener noreferrer"},Ka={href:"https://github1s.com/vuejs/router/blob/HEAD/src/RouterView.ts#L43-L44",target:"_blank",rel:"noopener noreferrer"},Ja=t('<h2 id="_44-vue3性能提升体现在哪些方面" tabindex="-1"><a class="header-anchor" href="#_44-vue3性能提升体现在哪些方面" aria-hidden="true">#</a> 44.Vue3性能提升体现在哪些方面？</h2><h3 id="分析-8" tabindex="-1"><a class="header-anchor" href="#分析-8" aria-hidden="true">#</a> 分析</h3><p>vue3在设计时有几个目标：更小、更快、更友好，这些改进多数与性能相关，因此可以围绕介绍</p><h3 id="思路-33" tabindex="-1"><a class="header-anchor" href="#思路-33" aria-hidden="true">#</a> 思路</h3><ol><li>总述和性能相关的新特性</li><li>逐个说细节</li><li>能说点原理更佳</li></ol><h3 id="回答范例-42" tabindex="-1"><a class="header-anchor" href="#回答范例-42" aria-hidden="true">#</a> 回答范例</h3><ol><li>分别从代码、编译、打包三个方面介绍vue3的性能提升</li><li>代码层面性能优化主要体现在全新响应式API，基于Proxy实现，初始化时间和内存占用均大幅改进</li><li>编译层面做了更多编译优化处理，比如静态提升、动态内容标记、事件缓存、区块等，可以有效跳过大量diff过程</li><li>打包时更好的tree-shaking，因此整体提交更小，加载更快</li></ol><h3 id="知其所以然-29" tabindex="-1"><a class="header-anchor" href="#知其所以然-29" aria-hidden="true">#</a> 知其所以然</h3>',8),Xa={href:"https://github1s.com/vuejs/core/blob/HEAD/packages/reactivity/src/baseHandlers.ts#L148-L153",target:"_blank",rel:"noopener noreferrer"},Ga={href:"https://github1s.com/vuejs/core/blob/HEAD/packages/reactivity/src/effect.ts#L18-L19",target:"_blank",rel:"noopener noreferrer"},Qa=t(`<h2 id="_45-vue3为什么用proxy代替defineproperty" tabindex="-1"><a class="header-anchor" href="#_45-vue3为什么用proxy代替defineproperty" aria-hidden="true">#</a> 45.Vue3为什么用proxy代替defineProperty?</h2><h3 id="分析-9" tabindex="-1"><a class="header-anchor" href="#分析-9" aria-hidden="true">#</a> 分析</h3><p>vue3中最重大的更新之一就是响应式模块<code>reactivity</code>的重写。主要的修改就是<code>Proxy</code>替换<code>defineProperty</code>实现响应式。此变化主要是从性能方面考量。</p><h3 id="思路-34" tabindex="-1"><a class="header-anchor" href="#思路-34" aria-hidden="true">#</a> 思路</h3><ol><li>属性拦截的几种方式</li><li>defineProperty的问题</li><li>Proxy的优点</li><li>其他考量</li></ol><h3 id="回答范例-43" tabindex="-1"><a class="header-anchor" href="#回答范例-43" aria-hidden="true">#</a> 回答范例</h3><ol><li>JS中做属性拦截常见的方式有三种：defineProperty、getter/setters、proxies</li><li>Vue2中使用<code>defineProperty</code>的原因是，2013年只能使用这种方式。由于该API的局限性，比如对于数组的拦截有问题，为此vue需要专门为数组响应式做一套实现。另外不能拦截那些新增、删除属性；最后<code>definePr0perty</code>方案在初始化时需要深度递归遍历待处理的对象才能对他进行完全拦截，明显增加了初始化的时间；通知更新过程需要维护大量dep实例和watcher实例，额外占用内存较多</li><li>以上两点在Proxy出现后，迎刃而解，不仅可以对数组实现拦截，还能对Map、Set实现拦截；另外Proxy的拦截也是懒处理行为，如果用户没有访问嵌套对象，那么也不会实施拦截，这就让初始化的速度和内存占用都改善了</li><li>当然Proxy是有兼容性问题的，IE完全不支持，所以如果需要兼容IE就不合适</li></ol><h3 id="知其所以然-30" tabindex="-1"><a class="header-anchor" href="#知其所以然-30" aria-hidden="true">#</a> 知其所以然</h3><ul><li>Proxy属性拦截的原理：利用get、set、deleteProperty这三个trap实现拦截</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token function">get</span><span class="token punctuation">(</span>traget<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">set</span><span class="token punctuation">(</span>traget<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">deletePropterty</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Object.defineProperty属性拦截原理：利用get、set这两个trap实现拦截</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">defineReactive</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> key<span class="token punctuation">,</span> val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_46-history和hash模式有何区别" tabindex="-1"><a class="header-anchor" href="#_46-history和hash模式有何区别" aria-hidden="true">#</a> 46.history和hash模式有何区别？</h2><p>差别主要在现实形式和部署上。</p><h3 id="体验-7" tabindex="-1"><a class="header-anchor" href="#体验-7" aria-hidden="true">#</a> 体验</h3><p>vue-router4.x中设置模式已经变化：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">createRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  history<span class="token operator">:</span> <span class="token function">createWebHashHistory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// hash模式</span>
  history<span class="token operator">:</span> <span class="token function">createWebHistory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// history模式</span>
  history<span class="token operator">:</span> <span class="token function">createMemoryHistory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// memory模式</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用起来一模一样</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/abort<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>go to abort<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>区别只在url形式</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>hash: \`http://xx.com/#/abort\`
history: \`http://xx.com/abort\`
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="思路-35" tabindex="-1"><a class="header-anchor" href="#思路-35" aria-hidden="true">#</a> 思路</h3><ol><li>总述两者区别</li><li>详细阐述使用细节</li><li>实现方式</li></ol><h3 id="回答范例-44" tabindex="-1"><a class="header-anchor" href="#回答范例-44" aria-hidden="true">#</a> 回答范例</h3><ol><li>vue-router有3个模式，其中history和hash更为常用。两者区别主要在显示形式和部署上</li><li>hash模式在地址栏显示的时候是以哈希的形式：#/xxx，这种方式使用和部署上都比较简单（不利于SEO）；history模式url看起来更优雅美观，但是应用在部署时需要做特殊配置，web服务器需要做回退处理，否则会出现刷新页面404的问题</li><li>在实现上不管哪种模式，最终都是通过监听popstate事件触发路由跳转处理，url显示不同只是显示效果上的差异</li></ol><h3 id="history-nginx配置" tabindex="-1"><a class="header-anchor" href="#history-nginx配置" aria-hidden="true">#</a> history nginx配置</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>server {
  listen  80;
  server_name xxx.com;
  
  location /admin {
    root /User/adc/www/admin
    index index.html
    try_files $uri $uri/ /admin/index.html 
  }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_47-什么场景使用嵌套路由" tabindex="-1"><a class="header-anchor" href="#_47-什么场景使用嵌套路由" aria-hidden="true">#</a> 47.什么场景使用嵌套路由？</h2><h3 id="思路-36" tabindex="-1"><a class="header-anchor" href="#思路-36" aria-hidden="true">#</a> 思路</h3><ol><li>概念和使用场景</li><li>使用方式</li><li>实现原理</li></ol><h3 id="回答范例-45" tabindex="-1"><a class="header-anchor" href="#回答范例-45" aria-hidden="true">#</a> 回答范例</h3><ol><li>平时开发中，应用的有些界面是由多层级组件组合而来的，这种情况下，url各部分通常对应某个嵌套的组件，vue-router中可以使用嵌套路由表示这种关系</li><li>表现形式是在两个路由间切换时，它们有公用的视图内容。此时通常提取一个父组件，内部放上<code>&lt;router-vie /&gt;</code>，从而形成物理上的嵌套，和逻辑上的嵌套对应起来。定义嵌套路由时使用<code>children</code>属性组织嵌套关系</li><li>原理上是在<code>router-view</code>组件内部判断其所处嵌套层级的深度，将这个深度作为匹配组件数组matched的索引，获取对应渲染组件并渲染之</li></ol><h3 id="知其所以然-31" tabindex="-1"><a class="header-anchor" href="#知其所以然-31" aria-hidden="true">#</a> 知其所以然</h3><p>router-view获取自己所在的深度<code>viewDepthKey</code>：默认0，加1之后传给后代，同时根据深度获取匹配路由</p><h2 id="_48-刷新后vuex状态丢失怎么解" tabindex="-1"><a class="header-anchor" href="#_48-刷新后vuex状态丢失怎么解" aria-hidden="true">#</a> 48.刷新后vuex状态丢失怎么解？</h2><h3 id="思路-37" tabindex="-1"><a class="header-anchor" href="#思路-37" aria-hidden="true">#</a> 思路</h3><ol><li>问题描述</li><li>解决方法</li><li>个人理解</li><li>三方库原理探讨</li></ol><h3 id="回答范例-46" tabindex="-1"><a class="header-anchor" href="#回答范例-46" aria-hidden="true">#</a> 回答范例</h3><ol><li>vuex只是在内存保存状态，刷新之后就会丢失，如果要持久化就要存起来</li><li>localstorage就很合适，提交mutation的时候同时存入localStorage，store中把值取出作为state的初始化即可</li><li>这里有两个问题，不是所有状态都需要持久化；如果需要保存的状态很多，编写的代码就不够优雅，每个提交的地方都需要单独做保存处理。这里就可以利用vuex的subscribe方法做一个统一的处理。设置可以封装一个vuex插件以便使用</li><li>类似的插件有vuex-persist,vuex-persistedstate,内部的实现就是通过订阅mutation变化做统一处理，通过插件的选项控制哪些需要持久化</li></ol><h2 id="_49-你觉得vuex有什么缺点" tabindex="-1"><a class="header-anchor" href="#_49-你觉得vuex有什么缺点" aria-hidden="true">#</a> 49.你觉得vuex有什么缺点？</h2><h3 id="思路-38" tabindex="-1"><a class="header-anchor" href="#思路-38" aria-hidden="true">#</a> 思路</h3><ol><li>先夸在贬</li><li>使用感受</li><li>解决方案</li></ol><h3 id="回答范例-47" tabindex="-1"><a class="header-anchor" href="#回答范例-47" aria-hidden="true">#</a> 回答范例</h3><ol><li>vuex利用响应式，使用起来已经相当方便编辑了，但是在使用付出中感觉模块化这一块做的过于复杂，用的时候容易出错，还要经常查看文档</li><li>比如：访问state时要带上模块key，内嵌模块的话会很长，不得不配合mapState使用，加不加namespace区别也很大，getters，mutations,actions这么默认全局，加上之后必须用字符串类型的path匹配。使用模式不统一，容易出错；对ts的支持也不友好，在使用模块时没有代码提示</li><li>pinia出现之后使用体验好了很大，vue3+pinia会是更好的组合</li></ol><h2 id="_50-composition-api和options-api有何不同" tabindex="-1"><a class="header-anchor" href="#_50-composition-api和options-api有何不同" aria-hidden="true">#</a> 50. Composition API和Options API有何不同？</h2><h3 id="分析-10" tabindex="-1"><a class="header-anchor" href="#分析-10" aria-hidden="true">#</a> 分析</h3><ol><li>vue3最重要的更新之一</li><li>它具有一系列的优点，针对Options API暴露的一些问题量身打造</li><li>是vue3的推荐写法，掌握它对掌握好Vue3至关重要</li><li>灵感源于react hooks，又青出于蓝</li></ol><h3 id="思路-39" tabindex="-1"><a class="header-anchor" href="#思路-39" aria-hidden="true">#</a> 思路</h3><ol><li>总述不同点</li><li>开发动机</li><li>如何选择</li></ol><h3 id="回答范例-48" tabindex="-1"><a class="header-anchor" href="#回答范例-48" aria-hidden="true">#</a> 回答范例</h3><ol><li>composition API是一组API,包括：reactivity API,生命周期钩子，依赖注入，使用户可以通过导入函数方式编写vue组件。而options API则通过声明组件选项的对象形式编写组件</li><li>composition APi最主要作用是能够简洁、高效复用逻辑。解决了过去options API中mixins的各种缺点；另外composition API具有更加敏捷的代码组织能力，很多用户喜欢options API，认为所有东西都有固定位置的选项放置代码，但是单个组件增长过大之后这反而成为限制，一个逻辑关注点分散在组件各处，形成代码碎片，维护时需要反复横跳，composition API则可以将它们有效组织在一起。最后composition API拥有更好的类型推断，对ts支持更友好，options API在设计之初并未考虑类型推断因素，虽然官方为此做了很多复杂的类型体操，确保用户可以在使用options API时获得类型推断，然而还是没办法用在mixins和provide/inject上</li><li>vue3首推composition API，但是这会让我们再代码组织上多花点心思，因此在选择上，如果我们项目属于中低复杂度的场景，options API仍是一个好选择。对于那些大型，高扩展，高维护的项目上，composition API会获得更大收益</li></ol>`,51);function Ya(Za,ns){const s=o("ExternalLinkIcon");return l(),i("div",null,[n("p",null,[n("a",g,[a("村长-原文链接"),e(s)])]),n("p",null,[n("a",f,[a("村长-视频链接"),e(s)])]),y,n("ul",null,[n("li",null,[n("a",_,[a("Vue 2"),e(s)])]),n("li",null,[n("a",x,[a("Vue 3"),e(s)])])]),w,n("ul",null,[n("li",null,[n("a",j,[a("vue3中生命周期的派发时刻"),e(s)])]),n("li",null,[n("a",q,[a("vue2中声明周期的派发时刻"),e(s)])])]),A,n("ul",null,[S,E,n("li",null,[n("a",D,[a("参考"),e(s)])])]),V,n("ul",null,[n("li",null,[n("a",C,[a("路由守卫"),e(s)])]),n("li",null,[n("a",L,[a("路由生成"),e(s)])]),n("li",null,[n("a",P,[a("动态追加路由"),e(s)])])]),R,n("ul",null,[n("li",null,[n("a",I,[a("vue2响应式"),e(s)])]),n("li",null,[n("a",T,[a("vue3响应式 reactive"),e(s)])]),n("li",null,[n("a",$,[a("vue3响应式 ref"),e(s)])])]),H,n("ul",null,[n("li",null,[n("a",O,[a("vnode定义"),e(s)])]),n("li",null,[n("a",B,[a("创建vnode：createElementBlock:"),e(s)])]),n("li",null,[n("a",M,[a("createVnode:"),e(s)])]),n("li",null,[n("a",F,[a("mount:"),e(s)]),a(" 调试mount过程：mountComponent")])]),N,n("ul",null,[n("li",null,[n("a",U,[a("patch关键代码"),e(s)])])]),z,W,n("p",null,[a("官网列举的最值得注意的"),n("a",K,[a("新特性"),e(s)])]),J,n("ul",null,[n("li",null,[n("a",X,[a("体验编译器优化"),e(s)])]),n("li",null,[n("a",G,[a("reactive实现"),e(s)])])]),Q,n("ol",null,[n("li",null,[n("a",Y,[a("如何响应动态路由参数的变化"),e(s)])]),n("li",null,[n("a",Z,[a("如何处理404 Not Found路由"),e(s)])])]),nn,n("ul",null,[n("li",null,[n("a",an,[a("createRouter如何创建实例"),e(s)])]),n("li",null,[n("a",sn,[a("事件监听"),e(s)])]),n("li",null,[n("a",en,[a("页面跳转RouterLink"),e(s)])]),n("li",null,[n("a",tn,[a("内容显示RouterView"),e(s)])])]),pn,n("ol",null,[n("li",null,[n("a",on,[a("nextTick"),e(s)]),a("是等待下一次DOM更新刷新的工具方法。")]),ln,cn,rn,un]),dn,n("ul",null,[n("li",null,[n("a",kn,[a("组件更新函数入队"),e(s)])]),n("li",null,[n("a",vn,[a("入队函数"),e(s)])]),n("li",null,[n("a",hn,[a("nextTick定义"),e(s)])])]),mn,bn,n("ol",null,[n("li",null,[a("先看"),n("a",gn,[a("computed"),e(s)]),a("、"),n("a",fn,[a("watch"),e(s)]),a("两者定义，列举使用上的差异")]),yn,_n,xn]),wn,n("ol",null,[jn,n("li",null,[a("watch和watchEffect有什么差异？ "),n("a",qn,[a("差异"),e(s)])])]),An,n("ul",null,[n("li",null,[n("a",Sn,[a("computed的实现"),e(s)])]),n("li",null,[n("a",En,[a("ComputedRefImpl"),e(s)])]),n("li",null,[n("a",Dn,[a("缓存性"),e(s)])]),n("li",null,[n("a",Vn,[a("watch"),e(s)])])]),Cn,n("ul",null,[n("li",null,[n("a",Ln,[a("观察beforeCreated和created钩子的处理"),e(s)])]),n("li",null,[n("a",Pn,[a("观察beforeMount和mounted钩子的处理"),e(s)])])]),Rn,n("ul",null,[n("li",null,[n("a",In,[a("KeepAlive定义"),e(s)])]),n("li",null,[n("a",Tn,[a("缓存定义"),e(s)])]),n("li",null,[n("a",$n,[a("缓存组件"),e(s)])]),n("li",null,[n("a",Hn,[a("获取缓存组件"),e(s)])])]),On,n("ul",null,[n("li",null,[n("a",Bn,[a("风格指南"),e(s)])]),n("li",null,[n("a",Mn,[a("性能"),e(s)])]),n("li",null,[n("a",Fn,[a("安全"),e(s)])]),n("li",null,[n("a",Nn,[a("访问性"),e(s)])]),n("li",null,[n("a",Un,[a("发布"),e(s)])])]),zn,n("ul",null,[n("li",null,[n("a",Wn,[a("vue3编译过程窥探"),e(s)])])]),Kn,n("ul",null,[n("li",null,[n("a",Jn,[a("mount函数"),e(s)])]),n("li",null,[n("a",Xn,[a("首次render"),e(s)])])]),Gn,n("blockquote",null,[Qn,n("ul",null,[n("li",null,[n("a",Yn,[a("vue-virtual-scroller"),e(s)])]),n("li",null,[n("a",Zn,[a("vue-virtual-scroll-grid"),e(s)])])])]),na,n("blockquote",null,[n("p",null,[a("参考项目："),n("a",aa,[a("vue-lazyload"),e(s)])])]),sa,n("p",null,[a("但同时也不宜过度拆分组件，尤其是为了所谓组件抽象将一些不需要渲染的组件特意抽出来，组件实例消耗远大于纯dom节点。参考："),n("a",ea,[a("避免不必要的组件抽象"),e(s)])]),n("ol",ta,[n("li",null,[a("服务端渲染/静态网站生成：SSR/SSG。如果SPA应用有首屏渲染慢的问题，可以考虑SSR、SSG方案优化。参考"),n("a",pa,[a("SSR Guide"),e(s)])])]),oa,n("ul",null,[n("li",null,[n("a",la,[a("patch方法接收单根vdom"),e(s)])])]),ia,n("ul",null,[n("li",null,[n("a",ca,[a("patch方法对Fragment的处理"),e(s)])])]),ra,n("p",null,[n("a",ua,[a("modules"),e(s)])]),da,n("ol",null,[ka,va,ha,n("li",null,[a(`结合注释() => import(/* webpackChunkName: "group-user" */ './UserDetails.vue')可以做webpack代码分块; vite中结合`),n("a",ma,[a("rollupOptions"),e(s)]),a("定义分块")]),ba]),ga,n("p",null,[a("component (和 components) 配置如果接收一个返回 Promise 组件的函数，Vue Router 只会在第一次进入页面时才会获取这个函数，然后使用缓存数据。 "),n("a",fa,[a("参考"),e(s)])]),ya,_a,n("p",null,[n("a",xa,[a("ref"),e(s)])]),wa,n("p",null,[n("a",ja,[a("reactive"),e(s)])]),qa,n("ul",null,[n("li",null,[n("a",Aa,[a("ref"),e(s)])]),n("li",null,[n("a",Sa,[a("reactive"),e(s)])])]),Ea,n("ul",null,[n("li",null,[n("a",Da,[a("watchEffect"),e(s)])])]),Va,n("ul",null,[n("li",null,[n("a",Ca,[a("watch"),e(s)])])]),La,n("p",null,[n("a",Pa,[a("Vue SFC Playground"),e(s)])]),Ra,n("p",null,[a("编译后的自定义指令会被withDirective函数装饰，进一步处理生成的vnode，添加到特定属性中。 "),n("a",Ia,[a("v-focus"),e(s)])]),Ta,n("p",null,[n("a",$a,[a("代码"),e(s)])]),Ha,n("p",null,[n("a",Oa,[a("resolveAssets"),e(s)]),n("a",Ba,[a("playground"),e(s)])]),Ma,n("p",null,[n("a",Fa,[a("defineAsyncComponent"),e(s)])]),Na,n("p",null,[n("a",Ua,[a("Vuex中Store的实现"),e(s)])]),za,n("ul",null,[n("li",null,[n("a",Wa,[a("routerLink"),e(s)])]),n("li",null,[n("a",Ka,[a("routerView"),e(s)])])]),Ja,n("ol",null,[n("li",null,[a("为什么基于Proxy更快了：初始化时懒出来，用户访问才做拦截处理，初始化更快"),n("a",Xa,[a("源代码"),e(s)])]),n("li",null,[a("轻量的依赖关系保存：利用weakMap、Map和Set保存响应式数据和副作用之间的依赖关系"),n("a",Ga,[a("源代码"),e(s)])])]),Qa])}const ss=p(b,[["render",Ya],["__file","vue_05.html.vue"]]);export{ss as default};
