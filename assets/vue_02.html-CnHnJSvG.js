import{_ as p,r as o,o as c,c as i,b as n,d as s,a as e,f as t}from"./app-pp3-cujv.js";const l="/blog/assets/img-1-DDVaHAFD.png",r="/blog/assets/img-2-RGiptrFb.png",u="/blog/assets/img-3-a2Zv529S.png",d="/blog/assets/img-4-CsrCu_OZ.png",k="/blog/assets/img-5-D9wB6do-.png",m={},v=n("h1",{id:"目标",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#目标","aria-hidden":"true"},"#"),s(" 目标")],-1),h=n("ul",null,[n("li",null,"vue初始化过程剖析"),n("li",null,"深入理解数据响应式")],-1),b={href:"https://www.processon.com/mindmap/64d391ece55181435686cc5f",target:"_blank",rel:"noopener noreferrer"},g=t('<h2 id="文件结构" tabindex="-1"><a class="header-anchor" href="#文件结构" aria-hidden="true">#</a> 文件结构</h2><p>根目录：</p><p><img src="'+l+'" alt=""></p><p>源码目录：</p><p><img src="'+r+`" alt=""></p><p>术语解释：</p><ul><li>runtime：仅包含运行时，不包含编译器</li><li>common：cjs规范，用于webpack1</li><li>esm：ES模块，用于webpack2+</li><li>umd: universal module definition，兼容cjs和amd，用于浏览器</li></ul><h2 id="入口" tabindex="-1"><a class="header-anchor" href="#入口" aria-hidden="true">#</a> 入口</h2><p>package.json中dev脚本中<code>-c scripts/config.js</code>指明配置文件所在 参数<code>TAGGET:web-full-dev</code>指明输出文件配置项</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token comment">// Runtime+compiler development build (Browser)</span>
  <span class="token string-property property">&#39;web-full-dev&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;web/entry-runtime-with-compiler.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 入口</span>
    <span class="token literal-property property">dest</span><span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;dist/vue.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 目标文件</span>
    <span class="token literal-property property">format</span><span class="token operator">:</span> <span class="token string">&#39;umd&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 输出规范</span>
    <span class="token literal-property property">env</span><span class="token operator">:</span> <span class="token string">&#39;development&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">alias</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">he</span><span class="token operator">:</span> <span class="token string">&#39;./entity-decoder&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    banner
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="初始化流程" tabindex="-1"><a class="header-anchor" href="#初始化流程" aria-hidden="true">#</a> 初始化流程</h2><ul><li>new Vue() <ul><li>_init()</li></ul></li><li>$mount() <ul><li>mountComponent() <ul><li>updateComponent() <ul><li>render()</li><li>update()</li></ul></li><li>new Watcher()</li></ul></li></ul></li></ul><p><img src="`+u+'" alt=""></p>',13),f={href:"https://v2.cn.vuejs.org/v2/guide/instance.html",target:"_blank",rel:"noopener noreferrer"},_=t(`<p><strong>入口 platforms/web/entry-runtime-with-compiler.js</strong></p><p>扩展默认$mount方法：处理template或el选项</p><p><strong>platforms/web/runtime/index.js</strong></p><p>安装web平台特有指令和组件 定义__patch__: 补丁函数，执行patching算法进行更新 定义$mount: 挂载vue实例到指定宿主元素（获得dom并替换宿主元素）</p><h3 id="new-vue" tabindex="-1"><a class="header-anchor" href="#new-vue" aria-hidden="true">#</a> new Vue()</h3><p><strong>core/index.js</strong></p><p>初始化全局api 具体如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Vue<span class="token punctuation">.</span>set <span class="token operator">=</span> <span class="token keyword">set</span>
Vue<span class="token punctuation">.</span>delete <span class="token operator">=</span> del
Vue<span class="token punctuation">.</span>nextTick <span class="token operator">=</span> nextTick
<span class="token function">initUse</span><span class="token punctuation">(</span>Vue<span class="token punctuation">)</span> <span class="token comment">// 实现Vue.use函数</span>
<span class="token function">initMixin</span><span class="token punctuation">(</span>Vue<span class="token punctuation">)</span> <span class="token comment">// 实现Vue.mixin函数</span>
<span class="token function">initExtend</span><span class="token punctuation">(</span>Vue<span class="token punctuation">)</span> <span class="token comment">// 实现Vue.extend函数</span>
<span class="token function">initAssetRegisters</span><span class="token punctuation">(</span>Vue<span class="token punctuation">)</span> <span class="token comment">// 注册实现Vue.component/directive/filter</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>core/instance/index.js</strong></p><p>Vue构造函数定义 定义Vue实例API</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Vue</span> <span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 构造函数仅执行了_init</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_init</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token function">initMixin</span><span class="token punctuation">(</span>Vue<span class="token punctuation">)</span> <span class="token comment">// 实现init函数</span>
<span class="token function">stateMixin</span><span class="token punctuation">(</span>Vue<span class="token punctuation">)</span> <span class="token comment">// 状态相关api $data,$props,$set,$delete,$watch</span>
<span class="token function">eventsMixin</span><span class="token punctuation">(</span>Vue<span class="token punctuation">)</span><span class="token comment">// 事件相关api $on,$once,$off,$emit</span>
<span class="token function">lifecycleMixin</span><span class="token punctuation">(</span>Vue<span class="token punctuation">)</span> <span class="token comment">// 生命周期api _update,$forceUpdate,$destroy</span>
<span class="token function">renderMixin</span><span class="token punctuation">(</span>Vue<span class="token punctuation">)</span><span class="token comment">// 渲染api _render,$nextTick</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>core/instance/init.js</strong></p><p>创建组件实例，初始化其数据、属性、事件等</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">initLifecycle</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span> <span class="token comment">// $parent,$root,$children,$refs</span>
<span class="token function">initEvents</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span> <span class="token comment">// 处理父组件传递的事件和回调 </span>
<span class="token function">initRender</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span> <span class="token comment">// $slots,$scopedSlots,_c,$createElement</span>
<span class="token function">callHook</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> <span class="token string">&#39;beforeCreate&#39;</span><span class="token punctuation">)</span>
<span class="token function">initInjections</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span> <span class="token comment">// 获取注入数据</span>
<span class="token function">initState</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span> <span class="token comment">// 初始化props，methods，data，computed，watch </span>
<span class="token function">initProvide</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span> <span class="token comment">// 提供数据注入 callHook(vm, &#39;created&#39;)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="mount" tabindex="-1"><a class="header-anchor" href="#mount" aria-hidden="true">#</a> $mount</h3><p><strong>mountComponent</strong></p><p>执行挂载，获取vdom并转换为dom</p><p><strong>new Watcher()</strong></p><p>创建组件渲染watcher</p><p><strong>update()</strong></p><p>初始化或更新，将传入vdom转换为dom，初始化时执行的是dom创建操作</p><p><strong>render() src\\core\\instance\\render.js</strong></p><p>渲染组件，获取vdom</p><h3 id="整体流程" tabindex="-1"><a class="header-anchor" href="#整体流程" aria-hidden="true">#</a> 整体流程</h3><p>new Vue() =&gt; _init() =&gt; $mount() =&gt; mountComponent() =&gt; new Watcher() =&gt; updateComponent() =&gt; render() =&gt; _update()</p><h2 id="数据响应式" tabindex="-1"><a class="header-anchor" href="#数据响应式" aria-hidden="true">#</a> 数据响应式</h2><p>数据响应式是MVVM框架的一大特点，通过某种策略可以感知数据的变化。Vue中利用了JS语言特性 Object.defineProperty()，通过定义对象属性getter/setter拦截对属性的访问。</p><p>具体实现是在Vue初始化时，会调用initState，它会初始化data，props等，这里着重关注data初始 化，</p><h3 id="整体流程-1" tabindex="-1"><a class="header-anchor" href="#整体流程-1" aria-hidden="true">#</a> 整体流程</h3><p><strong>initState (vm: Component) src\\core\\instance\\state.js</strong> 初始化数据，包括props、methods、data、computed和watch</p><p><strong>initData核心代码是将data数据响应化</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">initData</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">vm</span><span class="token operator">:</span> Component</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 执行数据响应化</span>
  <span class="token function">observe</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token boolean">true</span> <span class="token comment">/* asRootData */</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>core/observer/index.js</strong></p><p>observe方法返回一个Observer实例</p><p><strong>core/observer/index.js</strong></p><p>Observer对象根据数据类型执行对应的响应化操作</p><p>defineReactive定义对象属性的getter/setter，getter负责添加依赖，setter负责通知更新</p><p><strong>core/observer/dep.js</strong></p><p>Dep负责管理一组Watcher，包括watcher实例的增删及通知更新 <img src="`+d+`" alt=""></p><h3 id="watcher" tabindex="-1"><a class="header-anchor" href="#watcher" aria-hidden="true">#</a> watcher</h3><p>Watcher解析一个表达式并收集依赖，当数值变化时触发回调函数，常用于$watch API和指令中。</p><p>每个组件也会有对应的Watcher，数值变化会触发其update函数导致重新渲染</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Watcher</span> <span class="token punctuation">{</span> 
  <span class="token function">constructor</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token function">get</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token function">addDep</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">dep</span><span class="token operator">:</span> Dep</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> 
  <span class="token function">update</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>相关API：$watch</p></blockquote><p><img src="`+k+`" alt=""></p><h3 id="数组响应化" tabindex="-1"><a class="header-anchor" href="#数组响应化" aria-hidden="true">#</a> 数组响应化</h3><p>数组数据变化的侦测跟对象不同，我们操作数组通常使用push、pop、splice等方法，此时没有办法得 知数据变化。所以vue中采取的策略是拦截这些方法并通知dep。</p><p><strong>src\\core\\observer\\array.js</strong> 为数组原型中的7个可以改变内容的方法定义拦截器</p><p><strong>Observer中覆盖数组原型</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 替换数组原型</span>
  <span class="token function">protoAugment</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> arrayMethods<span class="token punctuation">)</span> <span class="token comment">// value.__proto__ = arrayMethods</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">observeArray</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,50);function w(x,j){const a=o("ExternalLinkIcon");return c(),i("div",null,[v,h,n("p",null,[n("a",b,[s("总结的思维导图"),e(a)])]),g,n("blockquote",null,[n("p",null,[n("a",f,[s("生命周期图示"),e(a)])])]),_])}const V=p(m,[["render",w],["__file","vue_02.html.vue"]]);export{V as default};
